{"version":3,"sources":["common/useStyles.js","Login/LoginForm.js","common/Loading.js","common/utils/constants.js","common/utils/context.js","common/fragments.js","Login/Login.js","Login/index.js","Menu/index.js","Menu/Menu.js","common/Form/Slider.js","Create/CreateForm.js","Create/Create.js","Create/index.js","Join/JoinForm.js","Join/Join.js","Join/index.js","Game/Header.js","Game/PlayerReady.js","Game/usePlayerStyles.js","Game/Player.js","Game/GameActions.js","Game/Lobby.js","Game/Crew/Card.js","Game/Crew/hooks/useCrewStyles.js","Game/Crew/TaskList.js","Game/Crew/ConfirmModal.js","Game/Crew/actions.js","Game/Crew/Board.js","Game/Crew/PlayedCard.js","Game/Crew/utils/propTypes.js","Game/Crew/utils/cards.js","Game/Crew/hooks/useHand.js","Game/Crew/CurrentPlayer.js","Game/Crew/Player.js","Game/Crew/Layout.js","Game/Crew/hooks/usePlayers.js","Game/subscriptions.js","Game/Game.js","Game/index.js","App.js","resolvers.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","_","textField","display","button","marginTop","marginRight","containerCenter","flexDirection","alignItems","flexRow","linkPlain","textDecoration","color","sliderWrapper","noBorder","border","stretch","pointer","cursor","marginLeft8","marginLeft","grey","bold","fontWeight","noMargin","margin","LoginForm","login","classes","initialValues","name","email","validate","values","errors","isEmail","onSubmit","a","setSubmitting","variables","submitForm","isSubmitting","className","component","TextField","type","label","LinearProgress","Button","variant","disabled","onClick","Loading","TASK_TYPES","GameContext","createContext","MeContext","useGameContext","useContext","useMeContext","PLAYER_DATA","gql","GAME_STATE_DATA","USER_DATA","GAME_DATA","LOGIN_USER","Login","client","useApolloClient","useMutation","onCompleted","localStorage","setItem","token","writeData","data","isLoggedIn","me","user","loading","error","Menu","to","Slider","props","field","form","value","fieldToSliderProps","onChange","e","setFieldValue","onBlur","handleBlur","displayName","CreateForm","createGame","description","size","placeholder","Typography","id","gutterBottom","defaultValue","getAriaValueText","aria-labelledby","valueLabelDisplay","step","marks","min","max","CREATE_GAME","Create","navigate","useNavigate","success","game","accessCode","JoinForm","joinGame","test","JOIN_GAME","Join","useParams","useState","setError","message","useEffect","Header","showAccessCode","gameState","location","useLocation","classNames","copy","href","replace","title","status","turnPlayerId","turn","currentPlayer","players","find","p","style","userId","getStatus","PlayerReady","isCurrent","player","updatePlayer","ready","gameId","playerId","optimisticResponse","__typename","usePlayerStyles","width","background","padding","marginBottom","fontSize","header","lineHeight","empty","justifyContent","flex","note","UPDATE_PLAYER","Player","isHost","amber","statusMessage","GameActions","isStartDisabled","startGame","leaveGame","LEAVE_GAME","Lobby","subscribe","startCrewGame","playerClasses","some","map","key","Array","length","fill","i","useCardStyles","card","height","backgroundColor","current","R","red","G","green","B","blue","Y","yellow","W","isCompleted","isPlayable","isLead","boxShadow","hover","taskSymbol","alignSelf","task","Card","taskProps","handleClick","hideHover","shouldShow","isTask","isEmpty","isHover","setHover","cardClasses","order","symbol","tooltip","repeat","getTaskProps","isShown","onMouseEnter","onMouseLeave","number","useCrewStyles","cardContainer","flexWrap","playerContainer","TaskList","tasks","handleClickCard","crewClasses","isCurrentTurn","useModalStyles","theme","paper","position","palette","shadows","spacing","top","left","transform","ConfirmModal","children","open","onConfirm","onClose","modalClasses","Modal","ASSIGN_TASK","PLAY_CARD","Board","setOpen","selectedTask","setSelectedTask","assignTask","playerStates","rounds","isLost","boardContainer","filter","round","cards","j","ps","played","isLast","PlayedCard","T","shape","string","isRequired","bool","isRocket","matchesColor","cardA","cardB","sortHand","hand","colors","push","Object","keys","forEach","sort","b","reduce","res","concat","CurrentPlayer","leadCard","every","useHand","selectedCard","setSelectedCard","playCard","setPlayerId","useLayoutStyles","mid","board","playerTop","playerVertical","borderLeft","borderRight","commander","borderColor","currentTurnPlayer","getTasks","t","Layout","layoutClasses","useMemo","myPlayerIndex","findIndex","merge","slice","usePlayers","isCommander","PLAYER_JOINED","PLAYER_LEFT","PLAYER_UPDATED","CREW_GAME_STARTED","TASK_ASSIGNED","CARD_PLAYED","GET_CURRENT_USER","GET_GAME","START_CREW_GAME","Game","playerIdDebug","setPlayerIdDebug","useQuery","fetchPolicy","gameData","subscribeToMore","get","document","updateQuery","prev","subscriptionData","playerJoined","isNew","mergeWith","dst","src","isArray","undefined","currentPlayerId","playerLeft","hostId","next","gameSubscriptions","playerUpdated","nextState","crewGameStarted","taskAssigned","cardPlayed","Provider","IS_LOGGED_IN","App","Container","maxWidth","path","typeDefs","Boolean","window","hostname","match","cache","InMemoryCache","cacheRedirects","Query","args","getCacheKey","fragmentMatcher","IntrospectionFragmentMatcher","introspectionQueryResultData","httpLink","setContext","headers","authorization","getItem","HttpLink","uri","credentials","wsLink","WebSocketLink","options","reconnect","link","split","query","definition","getMainDefinition","kind","operation","ApolloClient","ApolloLink","from","onError","graphQLErrors","networkError","locations","console","log","resolvers","persistCache","storage","ReactDOM","render","getElementById","setupAndRender","navigator","serviceWorker","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f95f75b2.chunk.js","sourcesContent":["import grey from '@material-ui/core/colors/grey';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((_) => ({\n    textField: {\n        display: 'block',\n    },\n    button: {\n        marginTop: 16,\n        '&:not(:last-child)': {\n            marginRight: 16,\n        },\n    },\n    containerCenter: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    flexRow: {\n        flexDirection: 'row',\n    },\n    linkPlain: {\n        textDecoration: 'none',\n        color: 'white',\n    },\n    sliderWrapper: {\n        marginTop: 16,\n        color: '#575757',\n    },\n    noBorder: {\n        border: 'none',\n    },\n    stretch: {\n        alignItems: 'stretch',\n    },\n    pointer: {\n        cursor: 'pointer',\n    },\n    marginLeft8: {\n        marginLeft: 8,\n    },\n    grey: {\n        color: grey[700],\n    },\n    bold: {\n        fontWeight: 'bold',\n    },\n    noMargin: {\n        margin: 0,\n    },\n}));\n\nexport default useStyles;\n","import React from 'react';\nimport T from 'prop-types';\nimport isEmail from 'isemail';\nimport { Formik, Form, Field } from 'formik';\nimport { Button, LinearProgress } from '@material-ui/core';\nimport { TextField } from 'formik-material-ui';\n\nimport useStyles from '../common/useStyles';\n\nconst LoginForm = ({ login }) => {\n    const classes = useStyles();\n\n    return (\n        <Formik\n            initialValues={{\n                name: '',\n                email: ''\n            }}\n            validate={values => {\n                const errors = {};\n\n                if (!values.name) {\n                    errors.name = 'Required';\n                }\n                if (!values.email) {\n                    errors.email = 'Required';\n                } else if (!isEmail.validate(values.email)) {\n                    errors.email = 'Invalid email address';\n                }\n\n                return errors;\n            }}\n            onSubmit={async (values, { setSubmitting }) => {\n                await login({ variables: values });\n                setSubmitting(false);\n            }}\n        >\n            {({submitForm, isSubmitting}) => (\n                <Form className={classes.containerCenter}>\n                    <h1>Ready Up </h1>\n                    <Field\n                        component={TextField}\n                        className={classes.textField}\n                        name=\"name\"\n                        type=\"text\"\n                        label=\"Display Name\"\n                    />\n                    <Field\n                        component={TextField}\n                        className={classes.textField}\n                        name=\"email\"\n                        type=\"email\"\n                        label=\"Email\"\n                    />\n                    {isSubmitting && <LinearProgress/>}\n                    <Button\n                        className={classes.button}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={isSubmitting}\n                        onClick={submitForm}\n                    >\n                        Login\n                    </Button>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nLoginForm.propTypes = {\n    login: T.func.isRequired,\n};\n\nexport default LoginForm;\n","import React from 'react';\n\nconst Loading = () => (\n    <div>\n        Loading...\n    </div>\n);\n\nexport default Loading;\n","export const TASK_TYPES = {\n    UNORDERED: 'UNORDERED',\n    ORDERED: 'ORDERED',\n    FIRST: 'FIRST',\n    LAST: 'LAST',\n};\n","import { createContext, useContext } from 'react';\n\nexport const GameContext = createContext(null);\nexport const MeContext = createContext(null);\n\nexport const useGameContext = () => useContext(GameContext);\nexport const useMeContext = () => useContext(MeContext);\n","import gql from 'graphql-tag';\n\nexport const PLAYER_DATA = gql`\n    fragment PlayerData on Player {\n        id\n        userId\n        gameId\n        status\n        statusMessage\n        isHost\n        email\n        name\n    }\n`;\n\nexport const GAME_STATE_DATA = gql`\n    fragment GameStateData on GameState {\n        tasks {\n            card {\n                color\n                number\n            }\n            playerId\n            type\n            order\n            isCompleted\n        }\n        playerStates {\n            hand {\n                color\n                number\n            }\n            isCommander\n            playerId\n            played {\n                color\n                number\n                isLead\n            }\n        }\n        rounds {\n            cards {\n                color\n                number\n                playerId\n                isLead\n            }\n            winnerId\n        }\n        turn\n        turnPlayerId\n        isLost\n    }\n`;\n\nexport const USER_DATA = gql`\n    fragment UserData on User {\n        id\n        email\n        name\n        players {\n            ...PlayerData\n        }\n    }\n    ${PLAYER_DATA}\n`;\n\nexport const GAME_DATA = gql`\n    fragment GameData on Game {\n        id\n        accessCode\n        status\n        name\n        description\n        size\n        gameState {\n            ...GameStateData\n        }\n        players {\n            ...PlayerData\n        }\n        type\n    }\n    ${PLAYER_DATA}\n    ${GAME_STATE_DATA}\n`;\n","import React from 'react';\nimport { useApolloClient, useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport LoginForm from './LoginForm';\nimport { Loading } from '../common';\nimport { USER_DATA } from '../common/fragments';\n\nexport const LOGIN_USER = gql`\n    mutation login($name: String!, $email: String!) {\n        login(name: $name, email: $email) {\n            token\n            user {\n                ...UserData\n            }\n        }\n    }\n    ${USER_DATA}\n`;\n\nconst Login = () => {\n    const client = useApolloClient();\n    const [login, { loading, error }] = useMutation(LOGIN_USER, {\n        onCompleted: ({ login }) => {\n            localStorage.setItem('readyup-token', login.token);\n            // write to Apollo cache\n            client.writeData({ data: {\n                isLoggedIn: true,\n                me: login.user,\n            } });\n        }\n    });\n\n    if (loading) return <Loading />;\n    if (error) return <p>An error occurred.</p>;\n\n    return <LoginForm login={login}/>;\n};\n\nexport default Login;\n","import Login from './Login';\nimport LoginForm from './LoginForm';\n\nexport {\n    Login,\n    LoginForm\n};\nexport default Login;\n","import Menu from './Menu';\n\nexport default Menu;\n","import React from 'react';\nimport { Link } from '@reach/router';\nimport { Button } from '@material-ui/core';\n\nimport useStyles from '../common/useStyles';\n\nconst Menu = () => {\n    const classes = useStyles();\n\n    // TODO: Split into GamesList and GamesActions components\n    return (\n        <div className={classes.containerCenter}>\n            <h1>Games</h1>\n            <div>\n                <Button\n                    className={classes.button}\n                    variant=\"contained\"\n                    color=\"primary\"\n                >\n                    <Link className={classes.linkPlain} to=\"/create\">\n                        Create\n                    </Link>\n                </Button>\n                <Button\n                    className={classes.button}\n                    variant=\"contained\"\n                    color=\"primary\"\n                >\n                    <Link className={classes.linkPlain} to=\"/join\">\n                        Join\n                    </Link>\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default Menu;\n","import React from 'react';\nimport { Slider as MuiSlider } from '@material-ui/core';\n\nexport const fieldToSliderProps = ({\n    field,\n    form: { isSubmitting },\n    disabled = false,\n    ...props\n}) => ({\n    disabled: isSubmitting || disabled,\n    ...props,\n    ...field,\n    name: field.name,\n    value: field.value\n});\n\nconst Slider = (props) => (\n    <MuiSlider\n        {...fieldToSliderProps(props)}\n        onChange={(e, value) => props.form.setFieldValue(props.field.name, value)}\n        onBlur={(e, value) => props.form.handleBlur(props.field.name, value)}\n    />\n);\n\nSlider.displayName = \"FormikMaterialUISlider\";\n\nexport default Slider;\n","import React from 'react';\nimport T from 'prop-types';\nimport { Formik, Form, Field } from 'formik';\nimport { Button, LinearProgress, Typography } from '@material-ui/core';\nimport { TextField } from 'formik-material-ui';\n\nimport Slider from '../common/Form/Slider';\nimport useStyles from '../common/useStyles';\n\nconst CreateForm = ({ createGame, loading }) => {\n    const classes = useStyles();\n\n    return (\n        <Formik\n            initialValues={{\n                name: '',\n                description: '',\n                size: 4\n            }}\n            validate={values => {\n                const errors = {};\n\n                if (!values.name) {\n                    errors.name = 'Required';\n                }\n                if (!values.size) {\n                    errors.size = 'Required';\n                }\n                if (!values.description) {\n                    errors.description = 'Required';\n                }\n\n                return errors;\n            }}\n            onSubmit={async (values, { setSubmitting }) => {\n                await createGame({ variables: values });\n                setSubmitting(false);\n            }}\n        >\n            {({ submitForm, isSubmitting }) => (\n                <Form className={classes.containerCenter}>\n                    <h1>Create Game</h1>\n                    <fieldset className={classes.noBorder} disabled={loading}>\n                        <Field\n                            component={TextField}\n                            className={classes.textField}\n                            name=\"name\"\n                            type=\"text\"\n                            label=\"Game name\"\n                        />\n                        <Field\n                            component={TextField}\n                            className={classes.textField}\n                            name=\"description\"\n                            placeholder=\"Where? When?\"\n                            type=\"text\"\n                            label=\"Description\"\n                        />\n                        <Field name=\"size\" placeholder=\"Number of players\">\n                            {({ field, form }) => (\n                                <div className={classes.sliderWrapper}>\n                                    <Typography id=\"size-slider\" gutterBottom>\n                                        Number of players: {field.value}\n                                    </Typography>\n                                    <Slider\n                                        field={field}\n                                        form={form}\n                                        defaultValue={4}\n                                        getAriaValueText={value => `${value} players`}\n                                        aria-labelledby=\"size-slider\"\n                                        valueLabelDisplay=\"auto\"\n                                        step={1}\n                                        marks\n                                        min={2}\n                                        max={10}\n                                    />\n                                </div>\n                            )}\n                        </Field>\n                        {isSubmitting && <LinearProgress />}\n                    </fieldset>\n                    <Button\n                        className={classes.button}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={isSubmitting}\n                        onClick={submitForm}\n                    >\n                        Create\n                    </Button>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nCreateForm.propTypes = {\n    createGame: T.func.isRequired,\n    loading: T.bool,\n};\n\nexport default CreateForm;\n","import React from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { useNavigate } from '@reach/router';\n\nimport CreateForm from './CreateForm';\n\nexport const CREATE_GAME = gql`\n    mutation createGame($name: String!, $description: String!, $size: Int!) {\n        createGame(name: $name, description: $description, size: $size) {\n            success\n            message\n            game {\n                accessCode\n            }\n        }\n    }\n`;\n\nconst Create = () => {\n    const navigate = useNavigate();\n    const [createGame, { loading, error }] = useMutation(CREATE_GAME, {\n        onCompleted: ({ createGame: { success, game }}) => {\n            if (success) {\n                navigate(`/game/${game.accessCode}`);\n            }\n        }\n    });\n\n    return (\n        <>\n            {error && <div>{error}</div>}\n            <CreateForm createGame={createGame} loading={loading} />\n        </>\n    );\n};\n\nexport default Create;\n","import Create from './Create';\n\nexport default Create;\n","import React from 'react';\nimport T from 'prop-types';\nimport { Formik, Form, Field } from 'formik';\nimport { Button, LinearProgress } from '@material-ui/core';\nimport { TextField } from 'formik-material-ui';\n\nimport useStyles from '../common/useStyles';\n\nconst JoinForm = ({ joinGame, loading }) => {\n    const classes = useStyles();\n\n    return (\n        <Formik\n            initialValues={{\n                accessCode: '',\n            }}\n            validate={values => {\n                const errors = {};\n\n                if (!values.accessCode) {\n                    errors.accessCode = 'Required';\n                } else if (!/^[a-z]{4}$/.test(values.accessCode)) {\n                    errors.accessCode = 'Access code must be a 4 character code';\n                }\n\n                return errors;\n            }}\n            onSubmit={async (values, { setSubmitting}) => {\n                await joinGame({ variables: values });\n                setSubmitting(false);\n            }}\n        >\n            {({ submitForm, isSubmitting }) => (\n                <Form className={classes.containerCenter}>\n                    <h1>Join Game</h1>\n                    <fieldset className={classes.noBorder} disabled={loading}>\n                        <Field\n                            component={TextField}\n                            className={classes.textField}\n                            name=\"accessCode\"\n                            type=\"text\"\n                            label=\"Access code\"\n                        />\n                        {isSubmitting && <LinearProgress />}\n                    </fieldset>\n                    <Button\n                        className={classes.button}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={isSubmitting}\n                        onClick={submitForm}\n                    >\n                        Join\n                    </Button>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nJoinForm.propTypes = {\n    joinGame: T.func.isRequired,\n};\n\nexport default JoinForm;\n\n","import React, { useState, useEffect } from 'react';\nimport gql from 'graphql-tag';\nimport { useNavigate, useParams } from '@reach/router';\nimport { useMutation } from '@apollo/react-hooks';\n\nimport JoinForm from './JoinForm';\n\nconst JOIN_GAME = gql`\n    mutation joinGame($accessCode: String!) {\n        joinGame(accessCode: $accessCode) {\n            success\n            message\n            game {\n                accessCode\n            }\n        }\n    }\n`;\n\nconst Join = () => {\n    const navigate = useNavigate();\n    const { accessCode } = useParams();\n    const [error, setError] = useState('');\n    const [joinGame, { loading }] = useMutation(JOIN_GAME, {\n        onCompleted: ({ joinGame: { success, message, game }}) => {\n            if (success) {\n                navigate(`/game/${game.accessCode}`);\n            } else {\n                setError(message);\n            }\n        }\n    });\n\n    // if navigating to url with accessCode, attempt to join it\n    useEffect(() => {\n        if (accessCode) {\n            joinGame({ variables: { accessCode }});\n        }\n    }, [accessCode, joinGame]);\n\n    return (\n        <>\n            {error && <div>{error}</div>}\n            <JoinForm joinGame={joinGame} loading={loading} />\n        </>\n    );\n};\n\nexport default Join;\n","import Join from './Join';\n\nexport default Join;\n","import React from 'react';\nimport T from 'prop-types';\nimport classNames from 'classnames';\nimport { useLocation } from '@reach/router';\nimport copy from 'copy-to-clipboard';\nimport FileCopyOutlinedIcon from '@material-ui/icons/FileCopyOutlined';\n\nimport { useGameContext } from '../common/utils';\n\nimport useStyles from '../common/useStyles';\n\nconst getStatus = (game, gameState, me) => {\n    if (game.status === 'WAITING') {\n        return 'Waiting for players...';\n    } else {\n        const { turnPlayerId, turn } = gameState;\n        // TODO: fix\n        const currentPlayer = game.players.find(p => p.id === turnPlayerId) || { name: 'fix this later' };\n\n        return (\n            <>\n                <p style={{ marginTop: 0 }}>\n                    {turn ? `Turn: ${gameState.turn}` : 'Assigning Tasks...'}\n                </p>\n                <p style={{ marginTop: 0 }}>\n                    {me.id === currentPlayer.userId ? 'Waiting on you!' : `Waiting on player: ${currentPlayer.name}`}\n                </p>\n            </>\n        )\n    }\n};\n\nconst Header = ({ showAccessCode, me }) => {\n    const game = useGameContext();\n    const { gameState } = game;\n    const classes = useStyles();\n    const location = useLocation();\n\n    return (\n        <>\n            <h1>Game: {game.name}</h1>\n            {showAccessCode && (\n                <h3 className={classNames(classes.containerCenter, classes.flexRow)}>\n                    Access code: {game.accessCode}\n                    <div\n                        className={classNames(classes.pointer, classes.marginLeft8)}\n                        onClick={() => copy(location.href.replace('game', 'join'))}\n                        title=\"Copy join game link\"\n                    >\n                        <FileCopyOutlinedIcon />\n                    </div>\n                </h3>\n            )}\n            <h3 className={classNames(classes.containerCenter, classes.grey)}>{getStatus(game, gameState, me)}</h3>\n        </>\n    );\n};\n\nHeader.propTypes = {\n    showAccessCode: T.bool,\n    me: T.object,\n};\n\nexport default Header;\n","import React from 'react';\nimport T from 'prop-types';\nimport CheckBoxOutlineBlankRoundedIcon from '@material-ui/icons/CheckBoxOutlineBlankRounded';\nimport CheckBoxRoundedIcon from '@material-ui/icons/CheckBoxRounded';\n\nconst PlayerReady = ({ game, isCurrent, player, updatePlayer }) => {\n    const ready = player.status === 'READY';\n\n    const updateStatus = () => {\n        const status = ready ? 'WAITING' : 'READY';\n        updatePlayer({\n            variables: {\n                gameId: game.id,\n                playerId: player.id,\n                status,\n            },\n            // provide optimistic update for local cache\n            optimisticResponse: {\n                __typename: 'Mutation',\n                updatePlayer: {\n                    __typename: 'PlayerUpdateResponse',\n                    success: true,\n                    player: {\n                        ...player,\n                        status,\n                    },\n                },\n            }\n        });\n    };\n\n    return (\n        <div {...(isCurrent && { onClick: updateStatus })}>\n            {ready ? (\n                <CheckBoxRoundedIcon />\n            ) : (\n                <CheckBoxOutlineBlankRoundedIcon />\n            )}\n        </div>\n    )\n};\n\nPlayerReady.propTypes = {\n    game: T.object.isRequired,\n    isCurrent: T.bool.isRequired,\n    player: T.object.isRequired,\n    updatePlayer: T.func.isRequired,\n};\n\nexport default PlayerReady;\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst usePlayerStyles = makeStyles(_ => ({\n    player: {\n        width: '100%',\n        display: 'flex',\n        background: '#ececec',\n        padding: 8,\n        marginBottom: 8,\n        fontSize: 14,\n        alignItems: 'center',\n    },\n    header: {\n        fontSize: 10,\n        fontWeight: 600,\n        lineHeight: 0.5,\n    },\n    empty: {\n        justifyContent: 'center',\n        fontSize: 12,\n    },\n    name: {\n        flex: '0 0 25%',\n        display: 'flex',\n        alignItems: 'center',\n    },\n    ready: {\n        flex: '0 0 15%',\n        display: 'flex',\n        alignItems: 'center',\n    },\n    note: {\n        flex: '0 0 50%',\n    },\n}));\n\nexport default usePlayerStyles;\n","import React from 'react';\nimport T from 'prop-types';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport VpnKeyOutlinedIcon from '@material-ui/icons/VpnKeyOutlined';\nimport amber from '@material-ui/core/colors/amber';\n\nimport PlayerReady from './PlayerReady';\nimport usePlayerStyles from './usePlayerStyles';\nimport { PLAYER_DATA } from '../common/fragments';\n\nconst UPDATE_PLAYER = gql`\n    mutation updatePlayer($playerId: ID!, $gameId: ID!, $status: PlayerStatus, $statusMessage: String) {\n        updatePlayer(playerId: $playerId, gameId: $gameId, status: $status, statusMessage: $statusMessage) {\n            success,\n            player {\n                ...PlayerData\n            }\n        }\n    }\n    ${PLAYER_DATA}\n`;\n\nconst Player = ({ game, player, isCurrent }) => {\n    const classes = usePlayerStyles();\n    const [updatePlayer] = useMutation(UPDATE_PLAYER);\n\n    return (\n        <div className={classes.player}>\n            <div className={classes.name}>\n                <span title={player.email}>\n                    {player.name}\n                </span>\n                {player.isHost && (\n                    <span title=\"Host\" style={{ marginLeft: 4 }}>\n                        <VpnKeyOutlinedIcon title=\"Host\" fontSize=\"small\" style={{ color: amber[700] }} />\n                    </span>\n                )}\n            </div>\n            <div className={classes.ready}>\n                <PlayerReady\n                    isCurrent={isCurrent}\n                    game={game}\n                    player={player}\n                    updatePlayer={updatePlayer}\n                />\n            </div>\n            <div className={classes.note}>\n                {player.statusMessage}\n            </div>\n        </div>\n    );\n};\n\nPlayer.propTypes = {\n    game: T.object,\n    player: T.object,\n    isCurrent: T.bool\n};\n\nexport default Player;\n","import React from 'react';\nimport T from 'prop-types';\nimport { Button } from '@material-ui/core';\n\nimport useStyles from '../common/useStyles';\n\nconst GameActions = ({ isStartDisabled, isHost, startGame, leaveGame }) => {\n    const classes = useStyles();\n\n    return (\n        <div>\n            {isHost && (\n                <Button\n                    className={classes.button}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={isStartDisabled}\n                    onClick={startGame}\n                >\n                    Start\n                </Button>\n            )}\n            <Button\n                className={classes.button}\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={leaveGame}\n            >\n                Leave\n            </Button>\n        </div>\n    );\n};\n\nGameActions.propTypes = {\n    isStartDisabled: T.bool.isRequired,\n    isHost: T.bool.isRequired,\n    startGame: T.func.isRequired,\n    leaveGame: T.func.isRequired,\n};\n\nexport default GameActions;\n","import React, { useEffect } from 'react';\nimport T from 'prop-types';\nimport classNames from 'classnames';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useNavigate } from '@reach/router';\n\nimport Header from './Header';\nimport Player from './Player';\nimport GameActions from './GameActions';\nimport { useGameContext, useMeContext } from '../common/utils';\n\nimport usePlayerStyles from './usePlayerStyles';\nimport useStyles from '../common/useStyles';\n\nconst LEAVE_GAME = gql`\n    mutation leaveGame($gameId: ID!) {\n        leaveGame(gameId: $gameId) {\n            success\n        }\n    }\n`;\n\nconst Lobby = ({ subscribe, startCrewGame }) => {\n    const classes = useStyles();\n    const playerClasses = usePlayerStyles();\n    const game = useGameContext();\n    const me = useMeContext();\n    const navigate = useNavigate();\n    const [leaveGame] = useMutation(LEAVE_GAME, {\n        variables: { gameId: game.id },\n        onCompleted: ({ leaveGame: { success } }) => {\n            if (success) {\n                navigate('/');\n            }\n        }\n    });\n    const player = game.players.find(p => p.userId === me.id);\n    const isStartDisabled = game.players.some(player => player.status !== 'READY');\n\n    /**\n     * Add subscriptions for player updates, game updates\n     */\n    useEffect(() => {\n        if (player) {\n            subscribe(player.id);\n        }\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    return (\n        <div className={classes.containerCenter}>\n            <Header showAccessCode />\n            <div className={classNames(playerClasses.player, playerClasses.header)}>\n                <div className={playerClasses.name}>Name</div>\n                <div className={playerClasses.ready}>Ready</div>\n                <div className={playerClasses.note}>Note</div>\n            </div>\n            {game.players.map((player) => (\n                <Player key={`player-${player.id}`} game={game} player={player} isCurrent={me.id === player.userId} />\n            ))}\n            {Array(game.size - game.players.length)\n                .fill(0)\n                .map((_, i) => (\n                    <div\n                        key={`open-slot-${i + 1}`}\n                        className={classNames(playerClasses.player, playerClasses.empty)}\n                    >\n                        (open)\n                    </div>\n                ))}\n            <GameActions\n                isStartDisabled={isStartDisabled}\n                isHost={player.isHost}\n                startGame={startCrewGame}\n                leaveGame={leaveGame}\n            />\n        </div>\n    );\n};\n\nLobby.propTypes = {\n    subscribe: T.func.isRequired,\n    startCrewGame: T.func.isRequired,\n};\n\nexport default Lobby;\n","import React, { useState } from 'react';\nimport T from 'prop-types';\nimport classNames from 'classnames';\nimport { isEmpty } from 'lodash';\nimport { makeStyles } from '@material-ui/core/styles';\nimport red from '@material-ui/core/colors/red';\nimport blue from '@material-ui/core/colors/blue';\nimport green from '@material-ui/core/colors/green';\nimport yellow from '@material-ui/core/colors/yellow';\nimport grey from '@material-ui/core/colors/grey';\n\nimport { TASK_TYPES } from '../../common/utils';\n\nconst useCardStyles = makeStyles((_) => ({\n    card: {\n        width: 20,\n        height: 30,\n        border: '1px solid #ececec',\n        display: 'flex',\n        backgroundColor: grey[500],\n    },\n    current: {\n        width: 30,\n        height: 45,\n    },\n    R: {\n        backgroundColor: red[700],\n        color: grey[50],\n    },\n    G: {\n        backgroundColor: green[700],\n        color: grey[50],\n    },\n    B: {\n        backgroundColor: blue[700],\n        color: grey[50],\n    },\n    Y: {\n        backgroundColor: yellow[400],\n    },\n    W: {\n        backgroundColor: grey[200],\n    },\n    isCompleted: {\n        backgroundColor: grey[700],\n        color: grey[50],\n    },\n    isPlayable: {\n        border: `1px solid ${green[300]}`,\n    },\n    isLead: {\n        border: `1px solid ${red[300]}`,\n        boxShadow: `0 0 10px 2px ${red[300]}`\n    },\n    hover: {\n        border: '1px solid black',\n        cursor: 'pointer',\n    },\n    taskSymbol: {\n        alignSelf: 'flex-end',\n    },\n    task: {\n        width: 30,\n        height: 45,\n    },\n}));\n\nconst Card = ({\n    card,\n    taskProps = {},\n    handleClick,\n    isCurrent,\n    hideHover = false,\n    shouldShow = false,\n}) => {\n    const isTask = !isEmpty(taskProps);\n    const [isHover, setHover] = useState(false);\n    const cardClasses = useCardStyles();\n    const { tooltip, symbol } = getTaskProps(taskProps);\n    const isShown = isCurrent || isTask || shouldShow;\n\n    return (\n        <div\n            className={classNames(cardClasses.card, {\n                [cardClasses.hover]: isShown && isHover && !hideHover,\n                [cardClasses.task]: isTask,\n                [cardClasses.current]: isCurrent,\n                [cardClasses[card.color]]: isShown,\n                [cardClasses.isCompleted]: isTask && taskProps.isCompleted,\n                [cardClasses.isPlayable]: !isTask && !!handleClick,\n                [cardClasses.isLead]: card.isLead,\n            })}\n            onMouseEnter={() => setHover(true)}\n            onMouseLeave={() => setHover(false)}\n            title={isTask ? tooltip : ''}\n            {...(handleClick ? { onClick: () => handleClick(card, taskProps) } : {})}\n        >\n            {isShown && (\n                <>\n                    <div>{card.number}</div>\n                    {isTask && <div className={cardClasses.taskSymbol}>{symbol}</div>}\n                </>\n            )}\n        </div>\n    );\n};\n\nCard.propTypes = {\n    card: T.shape({\n        number: T.number.isRequired,\n        color: T.string.isRequired,\n    }),\n    taskProps: T.shape({\n        type: T.oneOf(Object.keys(TASK_TYPES)),\n        order: T.number,\n    }),\n    handleClick: T.func,\n    isCurrent: T.bool,\n    hideHover: T.bool,\n    shouldShow: T.bool,\n};\n\nfunction getTaskProps(taskProps) {\n    const { type, order, isCompleted } = taskProps;\n    const props = { symbol: '' };\n\n    switch (type) {\n        case TASK_TYPES.FIRST:\n            props.tooltip = 'This task must be completed first.';\n            props.symbol = '\\u03B1';\n            break;\n        case TASK_TYPES.LAST:\n            props.tooltip = 'This task must be completed last.';\n            props.symbol = '\\u03A9';\n            break;\n        case TASK_TYPES.ORDERED:\n            props.tooltip = 'This task must be done in order.';\n            props.symbol = '>'.repeat(order + 1);\n            break;\n        default:\n            props.tooltip = 'This task can be completed at any time.';\n    }\n\n    if (isCompleted) {\n        props.tooltip = 'This task has been completed';\n        props.symbol = '\\u2713';\n    }\n\n    return props;\n}\n\nexport default Card;\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useCrewStyles = makeStyles((_) => ({\n    cardContainer: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center',\n    },\n    playerContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n    },\n}));\n\nexport default useCrewStyles;\n","import React from 'react';\nimport T from 'prop-types';\nimport classNames from 'classnames';\n\nimport Card from './Card';\nimport { TASK_TYPES, useGameContext, useMeContext } from '../../common/utils';\n\nimport useCrewStyles from './hooks/useCrewStyles';\nimport useStyles from '../../common/useStyles';\n\nconst TaskList = ({ tasks, title, handleClickCard }) => {\n    const classes = useStyles();\n    const crewClasses = useCrewStyles();\n    const game = useGameContext();\n    const me = useMeContext();\n    const isCurrentTurn = game.gameState.turnPlayerId === me.playerId;\n\n    return (\n        <div className={crewClasses.playerContainer}>\n            <h5 className={classNames(classes.bold, classes.noMargin)}>\n                {title}\n            </h5>\n            <div className={crewClasses.cardContainer}>\n                {tasks.map((task, i) => (\n                    <Card\n                        key={`${task}-${i}-${task.playerId}`}\n                        card={task.card}\n                        taskProps={{\n                            type: task.type,\n                            order: task.order,\n                            isCompleted: task.isCompleted,\n                        }}\n                        {...(isCurrentTurn ? { handleClick: handleClickCard } : { hideHover: true })}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nTaskList.propTypes = {\n    tasks: T.arrayOf(T.shape({\n        card: T.object.isRequired,\n        type: T.oneOf(Object.keys(TASK_TYPES)).isRequired,\n        order: T.number,\n        playerId: T.string,\n        isCompleted: T.bool,\n    })),\n    title: T.string,\n    handleClickCard: T.func,\n};\n\nexport default TaskList;\n","import React from 'react';\nimport T from 'prop-types';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport useStyles from '../../common/useStyles';\n\nconst useModalStyles = makeStyles((theme) => ({\n    paper: {\n        position: 'absolute',\n        width: 400,\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n    },\n}));\n\nconst ConfirmModal = ({ children, open, onConfirm, onClose }) => {\n    const classes = useStyles();\n    const modalClasses = useModalStyles();\n\n    return (\n        <Modal open={open} onClose={onClose}>\n            <div className={modalClasses.paper}>\n                {children}\n                <div>\n                    <Button\n                        className={classes.button}\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        onClick={onConfirm}\n                    >\n                        Yes\n                    </Button>\n                    <Button\n                        className={classes.button}\n                        variant=\"outlined\"\n                        color=\"secondary\"\n                        onClick={onClose}\n                    >\n                        Nevermind\n                    </Button>\n                </div>\n            </div>\n        </Modal>\n    );\n};\n\nConfirmModal.propTypes = {\n    open: T.bool.isRequired,\n    onConfirm: T.func.isRequired,\n    children: T.node,\n};\n\nexport default ConfirmModal;\n","import gql from 'graphql-tag';\n\nimport { GAME_STATE_DATA } from '../../common/fragments';\n\nexport const ASSIGN_TASK = gql`\n    mutation assignTask($gameId: ID!, $card: CardInput!, $isLast: Boolean!) {\n        assignTask(gameId: $gameId, card: $card, isLast: $isLast) {\n            success\n            game {\n                id\n                gameState {\n                    ...GameStateData\n                }\n            }\n        }\n    }\n    ${GAME_STATE_DATA}\n`;\n\nexport const PLAY_CARD = gql`\n    mutation playCard($gameId: ID!, $card: CardInput!) {\n        playCard(gameId: $gameId, card: $card) {\n            success\n            game {\n                id\n                gameState {\n                    ...GameStateData\n                }\n            }\n        }\n    }\n    ${GAME_STATE_DATA}\n`;\n","import React, { useState } from 'react';\nimport T from 'prop-types';\n\nimport TaskList from './TaskList';\nimport Card from './Card';\nimport ConfirmModal from './ConfirmModal';\nimport { ASSIGN_TASK } from './actions';\nimport { useGameContext, useMeContext } from '../../common/utils';\n\nimport useCrewStyles from './hooks/useCrewStyles';\nimport { useMutation } from '@apollo/react-hooks';\n\nconst Board = ({ tasks }) => {\n    const crewClasses = useCrewStyles();\n    const game = useGameContext();\n    const me = useMeContext();\n    const [open, setOpen] = useState(false);\n    const [selectedTask, setSelectedTask] = useState(null);\n    const [assignTask] = useMutation(ASSIGN_TASK);\n    const {\n        gameState: { playerStates, rounds, turn, isLost },\n    } = game;\n\n    const handleClickCard = (card, taskProps) => {\n        setOpen(true);\n        setSelectedTask({ card, taskProps });\n    };\n\n    const handleConfirmAssignTask = () => {\n        const { color, number } = selectedTask.card;\n        assignTask({\n            variables: {\n                gameId: game.id,\n                card: { color, number, playerId: me.playerId },\n                isLast: tasks.length === 1,\n            },\n        });\n        setOpen(false);\n    };\n\n    const handleClose = () => setOpen(false);\n\n    if (turn === -1) {\n        return (\n            <div className={crewClasses.boardContainer}>\n                {isLost ? 'You lose!' : 'You win!'}\n            </div>\n        );\n    }\n\n    return (\n        <div className={crewClasses.boardContainer}>\n            {!turn ? (\n                <TaskList tasks={tasks} title=\"Assign Tasks\" handleClickCard={handleClickCard} />\n            ) : (\n                <div>\n                    <h4>Game in progress</h4>\n                    <h5>Rounds</h5>\n                    {rounds\n                        .filter((round) => round.cards.length === game.players.length)\n                        .map((round, i) => (\n                            <div key={`round-${i}`} className={crewClasses.cardContainer}>\n                                {round.cards.map((card, j) => (\n                                    <Card\n                                        key={`round-${i}-card-${j}`}\n                                        card={card}\n                                        hideHover\n                                        shouldShow\n                                    />\n                                ))}\n                            </div>\n                        ))}\n                    <h5>Current round</h5>\n                    <div className={crewClasses.cardContainer}>\n                        {playerStates\n                            .filter((ps) => !!ps.played)\n                            .map((ps, i) => (\n                                <Card\n                                    key={`cr-card-${i}`}\n                                    card={ps.played}\n                                    hideHover\n                                    shouldShow\n                                />\n                            ))}\n                    </div>\n                </div>\n            )}\n            {open && (\n                <ConfirmModal open={open} onConfirm={handleConfirmAssignTask} onClose={handleClose}>\n                    <h4>Are you sure you want to take this task?</h4>\n                    <Card card={selectedTask.card} taskProps={selectedTask.taskProps} hideHover />\n                </ConfirmModal>\n            )}\n        </div>\n    );\n};\n\nBoard.propTypes = {\n    tasks: T.array, // unassigned tasks\n};\n\nexport default Board;\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport Card from './Card';\nimport { cardShape } from './utils/propTypes';\n\nimport useCrewStyles from './hooks/useCrewStyles';\nimport useStyles from '../../common/useStyles';\n\nconst PlayedCard = ({ card }) => {\n    const classes = useStyles();\n    const crewClasses = useCrewStyles();\n\n    return (\n        <div>\n            <h5 className={classNames(classes.bold, classes.noMargin)}>Played card</h5>\n            <div className={crewClasses.cardContainer}>\n                <Card card={card} shouldShow hideHover />\n            </div>\n        </div>\n    );\n};\n\nPlayedCard.propTypes = {\n    card: cardShape.isRequired,\n};\n\nexport default PlayedCard;\n","import T from 'prop-types';\n\nexport const cardShape = T.shape({\n    color: T.string.isRequired,\n    number: T.number.isRequired,\n    isLead: T.bool,\n    playerId: T.string,\n});\n","export const isRocket = (card) => card.color === 'W';\n\nexport const matchesColor = (cardA, cardB) => cardA.color === cardB.color;\n","import { isRocket, matchesColor } from '../utils';\nimport { useMeContext, useGameContext } from '../../../common/utils';\n\n/**\n * Determines which cards in hand are currently playable and returns sorted hand\n *\n * @param {Array} hand\n */\nexport const useHand = (hand) => {\n    const me = useMeContext();\n    const game = useGameContext();\n    const { turnPlayerId, rounds } = game.gameState;\n    const isCurrentTurn = turnPlayerId === me.playerId;\n\n    // not current player's turn, just return sorted hand\n    if (!isCurrentTurn) {\n        return sortHand(hand);\n    }\n\n    // get card that lead this round\n    const leadCard = rounds[rounds.length - 1].cards.find((card) => card.isLead);\n    let res;\n    const hasOnlyRocket = hand.every(isRocket);\n\n    if (hasOnlyRocket) {\n        // any card is playable since only rockets are left\n        res = hand.map((card) => ({ ...card, isPlayable: true }));\n    } else {\n        if (!leadCard) {\n            // any card is playable as long as not a rocket\n            res = hand.map((card) => (isRocket(card) ? card : { ...card, isPlayable: true }));\n        } else {\n            // cards that match color can be played, unless none\n            const hasMatchingColor = hand.some((card) => matchesColor(card, leadCard));\n\n            if (!hasMatchingColor) {\n                res = hand.map((card) => ({ ...card, isPlayable: true }));\n            } else {\n                res = hand.map((card) =>\n                    !matchesColor(card, leadCard) ? card : { ...card, isPlayable: true }\n                );\n            }\n        }\n    }\n\n    return sortHand(res);\n};\n\nfunction sortHand(hand) {\n    const colors = {};\n\n    for (let card of hand) {\n        if (!colors[card.color]) {\n            colors[card.color] = [];\n        }\n        colors[card.color].push(card);\n    }\n\n    Object.keys(colors).forEach((color) => {\n        colors[color].sort((a, b) => a.number - b.number);\n    });\n\n    return ['R', 'G', 'B', 'Y', 'W'].reduce((res, color) => {\n        if (colors[color]) {\n            res = res.concat(colors[color]);\n        }\n        return res;\n    }, []);\n}\n","import React, { useState } from 'react';\nimport T from 'prop-types';\nimport classNames from 'classnames';\nimport { useMutation } from '@apollo/react-hooks';\n\nimport Card from './Card';\nimport TaskList from './TaskList';\nimport ConfirmModal from './ConfirmModal';\nimport PlayedCard from './PlayedCard';\nimport { PLAY_CARD } from './actions';\nimport { useHand } from './hooks/useHand';\nimport { useGameContext, useMeContext } from '../../common/utils';\n\nimport useStyles from '../../common/useStyles';\nimport useCrewStyles from './hooks/useCrewStyles';\n\nconst CurrentPlayer = ({ player, tasks }) => {\n    const game = useGameContext();\n    const me = useMeContext();\n    const classes = useStyles();\n    const crewClasses = useCrewStyles();\n    const hand = useHand(player.hand);\n    const [open, setOpen] = useState(false);\n    const [selectedCard, setSelectedCard] = useState(null);\n    const [playCard] = useMutation(PLAY_CARD);\n\n    const handleClickCard = (card) => {\n        setOpen(true);\n        setSelectedCard(card);\n    };\n\n    const handleConfirmPlayCard = () => {\n        const { color, number } = selectedCard;\n        playCard({\n            variables: {\n                gameId: game.id,\n                card: { color, number, playerId: me.playerId },\n                isLast: tasks.length === 1\n            },\n        });\n        setOpen(false);\n    };\n\n    const handleClose = () => setOpen(false);\n\n    return (\n        <div className={crewClasses.playerContainer}>\n            <h4 className={classNames(classes.bold, classes.noMargin)}>\n                {player.name}\n            </h4>\n            <div className={crewClasses.cardContainer}>\n                {hand.map((card, i) => (\n                    <Card\n                        key={`player-${me.playerId}-card-${i}`}\n                        card={card}\n                        isCurrent={true}\n                        {...(card.isPlayable ? { handleClick: handleClickCard } : { hideHover: true })}\n                    />\n                ))}\n            </div>\n            {!!tasks.length && (\n                <TaskList tasks={tasks} title=\"Tasks to complete\" />\n            )}\n            {player.played && <PlayedCard card={player.played} />}\n            {open && (\n                <ConfirmModal\n                    open={open}\n                    onConfirm={handleConfirmPlayCard}\n                    onClose={handleClose}\n                >\n                    <h4>Are you sure you want to play this card?</h4>\n                    <Card\n                        card={selectedCard}\n                        hideHover\n                        isCurrent\n                    />\n                </ConfirmModal>\n            )}\n        </div>\n    );\n};\n\nCurrentPlayer.propTypes = {\n    player: T.object,\n    tasks: T.array,\n};\n\nexport default CurrentPlayer;\n","import React from 'react';\nimport T from 'prop-types';\nimport classNames from 'classnames';\n\nimport Card from './Card';\nimport TaskList from './TaskList';\nimport PlayedCard from './PlayedCard';\nimport { useGameContext, useMeContext } from '../../common/utils';\n\nimport useStyles from '../../common/useStyles';\nimport useCrewStyles from './hooks/useCrewStyles';\nimport CurrentPlayer from './CurrentPlayer';\n\nconst Player = (props) => {\n    const classes = useStyles();\n    const crewClasses = useCrewStyles();\n    const game = useGameContext();\n    const me = useMeContext();\n    const { player, tasks } = props;\n    const { id, played } = player;\n\n    if (props.isCurrent) {\n        return <CurrentPlayer {...props} />;\n    }\n    return (\n        <div className={crewClasses.playerContainer}>\n            <h4\n                className={classNames(classes.bold, classes.noMargin)}\n                {...(game.type === 'DEBUG' ? { onClick: () => me.setPlayerId(id) } : {})}\n            >\n                {player.name}\n            </h4>\n            <div className={crewClasses.cardContainer}>\n                {player.hand.map((card, i) => (\n                    <Card\n                        key={`player-${id}-card-${i}`}\n                        card={card}\n                        isCurrent={false}\n                    />\n                ))}\n            </div>\n            {!!tasks.length && (\n                <TaskList tasks={tasks} title=\"Tasks to complete\" />\n            )}\n            {played && <PlayedCard card={played} />}\n        </div>\n    );\n};\n\nPlayer.propTypes = {\n    player: T.object,\n    tasks: T.array,\n    isCurrent: T.bool,\n};\n\nexport default Player;\n","import React, { useEffect } from 'react';\nimport classNames from 'classnames';\nimport { makeStyles } from '@material-ui/core/styles';\nimport red from '@material-ui/core/colors/red';\nimport green from '@material-ui/core/colors/green';\n\nimport Board from './Board';\nimport Player from './Player';\nimport Header from '../Header';\nimport { usePlayers } from './hooks/usePlayers';\nimport { useGameContext, useMeContext } from '../../common/utils';\n\nimport useStyles from '../../common/useStyles';\n\nconst useLayoutStyles = makeStyles((_) => ({\n    mid: {\n        height: 400,\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    game: {\n        height: 600,\n    },\n    board: {\n        flex: 1,\n        display: 'flex',\n        flexWrap: 'wrap',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    player: {\n        height: 120,\n    },\n    playerTop: {\n        height: 90,\n    },\n    playerVertical: {\n        width: 60,\n        borderLeft: '1px solid gray',\n        borderRight: '1px solid gray',\n    },\n    border: {\n        border: '1px solid gray',\n    },\n    commander: {\n        border: '2px solid',\n        borderColor: red[500],\n    },\n    currentTurnPlayer: {\n        backgroundColor: green[100],\n    },\n}));\n\nconst getTasks = (tasks, playerId) => tasks.filter(t => t.playerId === playerId);\n\nconst Layout = ({ subscribe }) => {\n    const classes = useStyles();\n    const layoutClasses = useLayoutStyles();\n    const game = useGameContext();\n    const me = useMeContext();\n    const { gameState } = game;\n    const { tasks, turnPlayerId } = gameState;\n    // build ordered list of players\n    const players = usePlayers(game, me);\n\n    /**\n     * Add subscriptions for player updates, game updates\n     */\n    useEffect(() => {\n        if (me) {\n            subscribe(me.playerId);\n        }\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    return (\n        <div className={classNames(classes.containerCenter, classes.stretch)}>\n            <div className={classes.containerCenter}>\n                <Header me={me} />\n            </div>\n            <div className={layoutClasses.game}>\n                <div className={classNames(\n                    layoutClasses.playerTop,\n                    layoutClasses.border,\n                    {\n                        [layoutClasses.commander]: players[2].isCommander,\n                        [layoutClasses.currentTurnPlayer]: players[2].id === turnPlayerId,\n                    },\n                )}>\n                    {players[2] && (\n                        <Player\n                            player={players[2]}\n                            tasks={getTasks(tasks, players[2].id)}\n                        />\n                    )}\n                </div>\n                <div className={layoutClasses.mid}>\n                    <div className={classNames(\n                        layoutClasses.playerVertical,\n                        {\n                            [layoutClasses.commander]: players[1].isCommander,\n                            [layoutClasses.currentTurnPlayer]: players[1].id === turnPlayerId,\n                        },\n                    )}>\n                        {players[1] && (\n                            <Player\n                                player={players[1]}\n                                tasks={getTasks(tasks, players[1].id)}\n                            />\n                        )}\n                    </div>\n                    <div className={layoutClasses.board}>\n                        <Board tasks={getTasks(tasks, null)} />\n                    </div>\n                    <div className={classNames(\n                        layoutClasses.playerVertical,\n                        {\n                            [layoutClasses.commander]: players[3].isCommander,\n                            [layoutClasses.currentTurnPlayer]: players[3].id === turnPlayerId,\n                        },\n                    )}>\n                        {players[3] && (\n                            <Player\n                                player={players[3]}\n                                tasks={getTasks(tasks, players[3].id)}\n                            />\n                        )}\n                    </div>\n                </div>\n                <div className={classNames(\n                    layoutClasses.player,\n                    layoutClasses.border,\n                    {\n                        [layoutClasses.commander]: players[0].isCommander,\n                        [layoutClasses.currentTurnPlayer]: players[0].id === turnPlayerId,\n                    },\n                )}>\n                    <Player\n                        player={players[0]}\n                        tasks={getTasks(tasks, players[0].id)}\n                        isCurrent\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Layout;\n","import { useMemo } from 'react';\nimport { merge } from 'lodash';\n\n/**\n * Builds ordered array of players\n * 0: current player\n * 1: player on left\n * 2: player on top\n * 3: player on right\n *\n * @param game - game object\n * @param me - current user object\n */\nexport const usePlayers = (game, me) => {\n    return useMemo(() => {\n        const { players, gameState: { playerStates } } = game;\n        const myPlayerIndex = players.findIndex(p => p.id === me.playerId);\n\n        return merge(\n            [],\n            [...players.slice(myPlayerIndex), ...players.slice(0, myPlayerIndex)],\n            [...playerStates.slice(myPlayerIndex), ...playerStates.slice(0, myPlayerIndex)]\n        );\n    }, [game, me.playerId]);\n};\n","import gql from 'graphql-tag';\nimport { merge, mergeWith } from 'lodash';\nimport { PLAYER_DATA, GAME_DATA, GAME_STATE_DATA } from '../common/fragments';\n\nconst PLAYER_JOINED = gql`\n    subscription playerJoined($gameId: ID!) {\n        playerJoined(gameId: $gameId) {\n            player {\n                ...PlayerData\n            }\n            isNew\n        }\n    }\n    ${PLAYER_DATA}\n`;\n\nconst PLAYER_LEFT = gql`\n    subscription playerLeft($gameId: ID!, $currentPlayerId: ID!) {\n        playerLeft(gameId: $gameId, currentPlayerId: $currentPlayerId) {\n            playerId\n            hostId\n        }\n    }\n`;\n\nconst PLAYER_UPDATED = gql`\n    subscription playerUpdated($gameId: ID!, $currentPlayerId: ID!) {\n        playerUpdated(gameId: $gameId, currentPlayerId: $currentPlayerId) {\n            player {\n                ...PlayerData\n            }\n        }\n    }\n    ${PLAYER_DATA}\n`;\n\nconst CREW_GAME_STARTED = gql`\n    subscription crewGameStarted($gameId: ID!) {\n        crewGameStarted(gameId: $gameId) {\n            game {\n                ...GameData\n            }\n        }\n    }\n    ${GAME_DATA}\n`;\n\nconst TASK_ASSIGNED = gql`\n    subscription taskAssigned($gameId: ID!) {\n        taskAssigned(gameId: $gameId) {\n            gameState {\n                ...GameStateData\n            }\n        }\n    }\n    ${GAME_STATE_DATA}\n`;\n\nconst CARD_PLAYED = gql`\n    subscription cardPlayed($gameId: ID!) {\n        cardPlayed(gameId: $gameId) {\n            gameState {\n                ...GameStateData\n            }\n        }\n    }\n    ${GAME_STATE_DATA}\n`;\n\nexport const playerJoined = (gameId) => ({\n    document: PLAYER_JOINED,\n    variables: { gameId },\n    updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data || !subscriptionData.data.playerJoined.isNew) return prev;\n\n        return mergeWith(\n            {},\n            prev,\n            { game: { players: [subscriptionData.data.playerJoined.player] } },\n            (dst, src) => (Array.isArray(dst) ? [...dst, ...src] : undefined)\n        );\n    },\n});\n\nexport const playerLeft = (gameId, currentPlayerId) => ({\n    document: PLAYER_LEFT,\n    variables: { gameId, currentPlayerId },\n    updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        const { playerId, hostId } = subscriptionData.data.playerLeft;\n\n        const players = prev.game.players.reduce((next, player) => {\n            if (hostId === player.id) {\n                player.isHost = true;\n            }\n            if (player.id !== playerId) {\n                next.push(player);\n            }\n            return next;\n        }, []);\n\n        return {\n            game: {\n                ...prev.game,\n                players,\n            },\n        };\n    },\n});\n\nexport const playerUpdated = (gameId, currentPlayerId) => ({\n    document: PLAYER_UPDATED,\n    variables: { gameId, currentPlayerId },\n    updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        const { player: playerUpdated } = subscriptionData.data.playerUpdated;\n        const nextState = { ...prev };\n        nextState.game.players = nextState.game.players.map((player) =>\n            player.id === playerUpdated.id ? playerUpdated : player\n        );\n\n        return merge({}, nextState);\n    },\n});\n\nexport const crewGameStarted = (gameId) => ({\n    document: CREW_GAME_STARTED,\n    variables: { gameId },\n    updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        return { ...prev, game: subscriptionData.data.crewGameStarted.game };\n    },\n});\n\nexport const taskAssigned = (gameId) => ({\n    document: TASK_ASSIGNED,\n    variables: { gameId },\n    updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        return {\n            ...prev,\n            game: { ...prev.game, gameState: subscriptionData.data.taskAssigned.gameState },\n        };\n    },\n});\n\nexport const cardPlayed = (gameId) => ({\n    document: CARD_PLAYED,\n    variables: { gameId },\n    updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        return {\n            ...prev,\n            game: { ...prev.game, gameState: subscriptionData.data.cardPlayed.gameState },\n        };\n    },\n});\n","import React, { useState } from 'react';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { useParams } from '@reach/router';\nimport { get } from 'lodash';\n\nimport Lobby from './Lobby';\nimport { Layout } from './Crew';\nimport * as gameSubscriptions from './subscriptions';\nimport { GameContext, MeContext } from '../common/utils';\nimport Loading from '../common/Loading';\nimport { GAME_DATA, USER_DATA } from '../common/fragments';\n\nconst GET_CURRENT_USER = gql`\n    query me {\n        me @client {\n            ...UserData\n        }\n    }\n    ${USER_DATA}\n`;\n\nexport const GET_GAME = gql`\n    query getGame($accessCode: String!) {\n        game(accessCode: $accessCode) {\n            ...GameData\n        }\n    }\n    ${GAME_DATA}\n`;\n\nconst START_CREW_GAME = gql`\n    mutation startCrewGame($gameId: ID!) {\n        startCrewGame(gameId: $gameId) {\n            success\n            game {\n                ...GameData\n            }\n        }\n    }\n    ${GAME_DATA}\n`;\n\nconst Game = () => {\n    const [playerIdDebug, setPlayerIdDebug] = useState(null);\n    const { accessCode } = useParams();\n    const { data: gameData, loading, error, subscribeToMore } = useQuery(GET_GAME, {\n        variables: { accessCode },\n        fetchPolicy: 'network-only',\n    });\n    const {\n        data: { me },\n    } = useQuery(GET_CURRENT_USER);\n    const [startCrewGame] = useMutation(START_CREW_GAME, {\n        variables: { gameId: get(gameData, 'game.id') },\n    });\n\n    if (loading) return <Loading />;\n    if (error) return <p>ERROR</p>;\n    if (!gameData) return <p>Not found</p>;\n\n    // subscribe to game updates\n    const { game } = gameData;\n    const subscribe = (playerId) => {\n        subscribeToMore(gameSubscriptions.playerJoined(game.id));\n        subscribeToMore(gameSubscriptions.playerLeft(game.id, playerId));\n        subscribeToMore(gameSubscriptions.playerUpdated(game.id, playerId));\n        subscribeToMore(gameSubscriptions.crewGameStarted(game.id));\n        subscribeToMore(gameSubscriptions.taskAssigned(game.id));\n        subscribeToMore(gameSubscriptions.cardPlayed(game.id));\n    };\n    const player = game.players.find((p) => p.userId === me.id);\n\n    const setPlayerId = (playerId) => setPlayerIdDebug(playerId);\n\n    return (\n        <MeContext.Provider value={{ ...me, playerId: playerIdDebug || player.id, setPlayerId }}>\n            <GameContext.Provider value={game}>\n                {game.status === 'IN_PROGRESS' ? (\n                    <Layout me={me} subscribe={subscribe} />\n                ) : (\n                    <Lobby\n                        me={me}\n                        subscribe={subscribe}\n                        startCrewGame={startCrewGame}\n                    />\n\n                )}\n            </GameContext.Provider>\n        </MeContext.Provider>\n    );\n};\n\nexport default Game;\n","import Game from './Game';\n\nexport default Game;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Container } from '@material-ui/core';\nimport { Router } from '@reach/router';\n\nimport Login from './Login';\nimport Menu from './Menu';\nimport Create from './Create';\nimport Join from './Join';\nimport Game from './Game';\n\nimport './App.scss';\n\nconst IS_LOGGED_IN = gql`\n  query isLoggedIn {\n    isLoggedIn @client\n  }\n`;\n\nfunction App() {\n  const { data } = useQuery(IS_LOGGED_IN);\n\n  return (\n      <Container maxWidth=\"sm\">\n          {!data.isLoggedIn ? (\n              <Login />\n          ) : (\n              <Router>\n                  <Menu path=\"/\" />\n                  <Create path=\"/create\" />\n                  <Join path=\"/join\" />\n                  <Join path=\"/join/:accessCode\" />\n                  <Game path=\"/game/:accessCode\" />\n              </Router>\n          )}\n      </Container>\n  );\n}\n\nexport default App;\n","import gql from 'graphql-tag';\n\nexport const typeDefs = gql`\n    directive @client on FIELD\n    \n    extend type Query {\n        isLoggedIn: Boolean!\n        me: User\n    }\n`;\n\nexport const resolvers = {\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache, IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, split } from 'apollo-link';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { persistCache } from 'apollo-cache-persist';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nimport App from './App';\nimport { resolvers, typeDefs } from './resolvers';\nimport introspectionQueryResultData from './fragmentTypes.json';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nconst cache = new InMemoryCache({\n    cacheRedirects: {\n        Query: {\n            user: (_, args, { getCacheKey }) =>\n                getCacheKey({\n                    __typename: 'User',\n                    id: args.userId\n                })\n        }\n    },\n    fragmentMatcher: new IntrospectionFragmentMatcher({ introspectionQueryResultData }),\n});\n\nconst authLink = setContext((_, { headers }) => ({\n    // get auth token if it exists and return headers to context for httpLink to read\n    headers: {\n        ...headers,\n        authorization: localStorage.getItem('readyup-token')\n    }\n}));\n\n// http link to graphql\nconst httpLink = authLink.concat(\n    new HttpLink({\n        uri:\n            process.env.NODE_ENV === 'production'\n                ? 'https://readyup-crew.herokuapp.com/graphql'\n                : 'http://localhost:8000/graphql',\n        credentials: 'same-origin'\n    })\n);\n\n// websocket link to subscriptions\nconst wsLink = new WebSocketLink({\n    uri:\n        process.env.NODE_ENV === 'production'\n            ? 'wss://readyup-crew.herokuapp.com/subscriptions'\n            : 'ws://localhost:8000/subscriptions',\n    options: {\n        reconnect: true\n    }\n});\n\n// split links to send data to each link based on operation type\nconst link = split(\n    // split based on operation type\n    ({ query }) => {\n        const definition = getMainDefinition(query);\n\n        return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n    },\n    wsLink,\n    httpLink\n);\n\nconst client = new ApolloClient({\n    link: ApolloLink.from([\n        onError(({ graphQLErrors, networkError }) => {\n            if (graphQLErrors)\n                graphQLErrors.forEach(({ message, locations, path }) =>\n                    console.log(\n                        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n                    )\n                );\n            if (networkError) console.log(`[Network error]: ${networkError}`);\n        }),\n        link\n    ]),\n    cache,\n    typeDefs,\n    resolvers\n});\n\ncache.writeData({\n    data: {\n        isLoggedIn: !!localStorage.getItem('readyup-token')\n    }\n});\n\n// set up persisted client cache\nconst setupAndRender = async () => {\n    await persistCache({\n        cache,\n        storage: localStorage\n    });\n\n    ReactDOM.render(\n        <ApolloProvider client={client}>\n            <App />\n        </ApolloProvider>,\n        document.getElementById('root')\n    );\n};\n\nsetupAndRender();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}