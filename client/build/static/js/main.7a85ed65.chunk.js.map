{"version":3,"sources":["common/useStyles.js","Login/LoginForm.js","common/Loading.js","common/schema.js","Login/Login.js","Login/index.js","Menu/index.js","Menu/Menu.js","common/Form/Slider.js","Create/CreateForm.js","Create/Create.js","Create/index.js","Join/JoinForm.js","Join/Join.js","Join/index.js","Game/PlayerReady.js","Game/usePlayerStyles.js","Game/Player.js","Game/GameActions.js","Game/Lobby.js","Game/Crew/useCrewStyles.js","Game/Crew/Card.js","Game/Crew/AssignTasks.js","Game/Crew/Board.js","Game/Crew/Player.js","Game/Crew/Layout.js","Game/subscriptions.js","Game/Game.js","Game/index.js","App.js","resolvers.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","_","textField","display","button","marginTop","marginRight","containerCenter","flexDirection","alignItems","linkPlain","textDecoration","color","sliderWrapper","noBorder","border","stretch","LoginForm","login","classes","initialValues","name","email","validate","values","errors","isEmail","onSubmit","a","setSubmitting","variables","submitForm","isSubmitting","className","component","TextField","type","label","LinearProgress","Button","variant","disabled","onClick","Loading","USER_DATA","gql","GAME_DATA","LOGIN_USER","Login","client","useApolloClient","useMutation","onCompleted","localStorage","setItem","token","writeData","data","isLoggedIn","me","user","loading","error","Menu","to","Slider","props","field","form","value","fieldToSliderProps","onChange","e","setFieldValue","onBlur","handleBlur","displayName","CreateForm","createGame","description","size","placeholder","Typography","id","gutterBottom","defaultValue","getAriaValueText","aria-labelledby","valueLabelDisplay","step","marks","min","max","CREATE_GAME","Create","navigate","useNavigate","success","game","accessCode","JoinForm","joinGame","test","JOIN_GAME","Join","useParams","useState","setError","message","useEffect","PlayerReady","isCurrent","updateUser","ready","status","gameId","userId","optimisticResponse","__typename","usePlayerStyles","player","width","background","padding","marginBottom","fontSize","header","fontWeight","lineHeight","empty","justifyContent","flex","note","GET_USER","UPDATE_USER","Player","current","get","useQuery","title","statusMessage","GameActions","isStartDisabled","isHost","startGame","leaveGame","LEAVE_GAME","Lobby","subscribe","startCrewGame","playerClasses","users","some","hostId","classNames","map","key","Array","length","fill","i","useCrewStyles","cardContainer","useCardStyles","card","height","R","backgroundColor","red","grey","G","green","B","blue","Y","yellow","W","hover","taskSymbol","alignSelf","task","cursor","Card","isTask","taskReq","handleClick","isHover","setHover","cardClasses","isEmpty","symbol","isFirst","tooltip","isLast","order","repeat","getTaskProps","onMouseEnter","onMouseLeave","number","AssignTasks","tasks","crewClasses","first","ordered","last","unordered","Board","console","log","gameState","useMemo","JSON","parse","turn","playerState","sortedHand","hand","colors","push","Object","keys","forEach","sort","b","reduce","res","concat","sortHand","useLayoutStyles","mid","board","playerTop","playerVertical","borderLeft","borderRight","Layout","layoutClasses","myPlayerIndex","findIndex","PLAYER_JOINED","PLAYER_LEFT","USER_UPDATED","CREW_GAME_STARTED","GET_CURRENT_USER","GET_GAME","START_CREW_GAME","Game","fetchPolicy","subscribeToMore","document","updateQuery","prev","subscriptionData","playerJoined","isNew","mergeWith","dst","src","isArray","undefined","playerLeft","isDeleted","filter","gameSubscriptions","currentUserId","userUpdated","nextState","merge","crewGameStarted","IS_LOGGED_IN","App","Container","maxWidth","path","typeDefs","Boolean","window","location","hostname","match","cache","InMemoryCache","cacheRedirects","Query","args","getCacheKey","httpLink","setContext","headers","authorization","getItem","HttpLink","uri","credentials","wsLink","WebSocketLink","options","reconnect","link","split","query","definition","getMainDefinition","kind","operation","ApolloClient","ApolloLink","from","onError","graphQLErrors","networkError","locations","resolvers","persistCache","storage","ReactDOM","render","getElementById","setupAndRender","navigator","serviceWorker","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.7a85ed65.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(_ => ({\n    textField: {\n        display: 'block',\n    },\n    button: {\n        marginTop: 16,\n        '&:not(:last-child)': {\n            marginRight: 16,\n        },\n    },\n    containerCenter: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    linkPlain: {\n        textDecoration: 'none',\n        color: 'white',\n    },\n    sliderWrapper: {\n        marginTop: 16,\n        color: '#575757',\n    },\n    noBorder: {\n        border: 'none',\n    },\n    stretch: {\n        alignItems: 'stretch',\n    },\n}));\n\nexport default useStyles;\n","import React from 'react';\nimport T from 'prop-types';\nimport isEmail from 'isemail';\nimport { Formik, Form, Field } from 'formik';\nimport { Button, LinearProgress } from '@material-ui/core';\nimport { TextField } from 'formik-material-ui';\n\nimport useStyles from '../common/useStyles';\n\nconst LoginForm = ({ login }) => {\n    const classes = useStyles();\n\n    return (\n        <Formik\n            initialValues={{\n                name: '',\n                email: ''\n            }}\n            validate={values => {\n                const errors = {};\n\n                if (!values.name) {\n                    errors.name = 'Required';\n                }\n                if (!values.email) {\n                    errors.email = 'Required';\n                } else if (!isEmail.validate(values.email)) {\n                    errors.email = 'Invalid email address';\n                }\n\n                return errors;\n            }}\n            onSubmit={async (values, { setSubmitting }) => {\n                await login({ variables: values });\n                setSubmitting(false);\n            }}\n        >\n            {({submitForm, isSubmitting}) => (\n                <Form className={classes.containerCenter}>\n                    <h1>Ready Up </h1>\n                    <Field\n                        component={TextField}\n                        className={classes.textField}\n                        name=\"name\"\n                        type=\"text\"\n                        label=\"Display Name\"\n                    />\n                    <Field\n                        component={TextField}\n                        className={classes.textField}\n                        name=\"email\"\n                        type=\"email\"\n                        label=\"Email\"\n                    />\n                    {isSubmitting && <LinearProgress/>}\n                    <Button\n                        className={classes.button}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={isSubmitting}\n                        onClick={submitForm}\n                    >\n                        Login\n                    </Button>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nLoginForm.propTypes = {\n    login: T.func.isRequired,\n};\n\nexport default LoginForm;\n","import React from 'react';\n\nconst Loading = () => (\n    <div>\n        Loading...\n    </div>\n);\n\nexport default Loading;\n","import gql from 'graphql-tag';\n\nexport const USER_DATA = gql`\n    fragment UserData on User {\n        id\n        email\n        name\n        status\n        statusMessage\n        playerState\n    }\n`;\n\nexport const GAME_DATA = gql`\n    fragment GameData on Game {\n        id\n        hostId\n        accessCode\n        status\n        name\n        description\n        size\n        gameState\n        users {\n            ...UserData\n        }\n    }\n    ${USER_DATA}\n`;\n","import React from 'react';\nimport { useApolloClient, useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport LoginForm from './LoginForm';\nimport { Loading } from '../common';\nimport { USER_DATA } from '../common/schema';\n\nexport const LOGIN_USER = gql`\n    mutation login($name: String!, $email: String!) {\n        login(name: $name, email: $email) {\n            token\n            user {\n                ...UserData\n            }\n        }\n    }\n    ${USER_DATA}\n`;\n\nconst Login = () => {\n    const client = useApolloClient();\n    const [login, { loading, error }] = useMutation(LOGIN_USER, {\n        onCompleted: ({ login }) => {\n            localStorage.setItem('readyup-token', login.token);\n            // write to Apollo cache\n            client.writeData({ data: {\n                isLoggedIn: true,\n                me: login.user,\n            } });\n        }\n    });\n\n    if (loading) return <Loading />;\n    if (error) return <p>An error occurred.</p>;\n\n    return <LoginForm login={login}/>;\n};\n\nexport default Login;\n","import Login from './Login';\nimport LoginForm from './LoginForm';\n\nexport {\n    Login,\n    LoginForm\n};\nexport default Login;\n","import Menu from './Menu';\n\nexport default Menu;\n","import React from 'react';\nimport { Link } from '@reach/router';\nimport { Button } from '@material-ui/core';\n\nimport useStyles from '../common/useStyles';\n\nconst Menu = () => {\n    const classes = useStyles();\n\n    // TODO: Split into GamesList and GamesActions components\n    return (\n        <div className={classes.containerCenter}>\n            <h1>Games</h1>\n            <div>\n                <Button\n                    className={classes.button}\n                    variant=\"contained\"\n                    color=\"primary\"\n                >\n                    <Link className={classes.linkPlain} to=\"/create\">\n                        Create\n                    </Link>\n                </Button>\n                <Button\n                    className={classes.button}\n                    variant=\"contained\"\n                    color=\"primary\"\n                >\n                    <Link className={classes.linkPlain} to=\"/join\">\n                        Join\n                    </Link>\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default Menu;\n","import React from 'react';\nimport { Slider as MuiSlider } from '@material-ui/core';\n\nexport const fieldToSliderProps = ({\n    field,\n    form: { isSubmitting },\n    disabled = false,\n    ...props\n}) => ({\n    disabled: isSubmitting || disabled,\n    ...props,\n    ...field,\n    name: field.name,\n    value: field.value\n});\n\nconst Slider = (props) => (\n    <MuiSlider\n        {...fieldToSliderProps(props)}\n        onChange={(e, value) => props.form.setFieldValue(props.field.name, value)}\n        onBlur={(e, value) => props.form.handleBlur(props.field.name, value)}\n    />\n);\n\nSlider.displayName = \"FormikMaterialUISlider\";\n\nexport default Slider;\n","import React from 'react';\nimport T from 'prop-types';\nimport { Formik, Form, Field } from 'formik';\nimport { Button, LinearProgress, Typography } from '@material-ui/core';\nimport { TextField } from 'formik-material-ui';\n\nimport Slider from '../common/Form/Slider';\nimport useStyles from '../common/useStyles';\n\nconst CreateForm = ({ createGame, loading }) => {\n    const classes = useStyles();\n\n    return (\n        <Formik\n            initialValues={{\n                name: '',\n                description: '',\n                size: 4\n            }}\n            validate={values => {\n                const errors = {};\n\n                if (!values.name) {\n                    errors.name = 'Required';\n                }\n                if (!values.size) {\n                    errors.size = 'Required';\n                }\n                if (!values.description) {\n                    errors.description = 'Required';\n                }\n\n                return errors;\n            }}\n            onSubmit={async (values, { setSubmitting }) => {\n                await createGame({ variables: values });\n                setSubmitting(false);\n            }}\n        >\n            {({ submitForm, isSubmitting }) => (\n                <Form className={classes.containerCenter}>\n                    <h1>Create Game</h1>\n                    <fieldset className={classes.noBorder} disabled={loading}>\n                        <Field\n                            component={TextField}\n                            className={classes.textField}\n                            name=\"name\"\n                            type=\"text\"\n                            label=\"Game name\"\n                        />\n                        <Field\n                            component={TextField}\n                            className={classes.textField}\n                            name=\"description\"\n                            placeholder=\"Where? When?\"\n                            type=\"text\"\n                            label=\"Description\"\n                        />\n                        <Field name=\"size\" placeholder=\"Number of players\">\n                            {({ field, form }) => (\n                                <div className={classes.sliderWrapper}>\n                                    <Typography id=\"size-slider\" gutterBottom>\n                                        Number of players: {field.value}\n                                    </Typography>\n                                    <Slider\n                                        field={field}\n                                        form={form}\n                                        defaultValue={4}\n                                        getAriaValueText={value => `${value} players`}\n                                        aria-labelledby=\"size-slider\"\n                                        valueLabelDisplay=\"auto\"\n                                        step={1}\n                                        marks\n                                        min={2}\n                                        max={10}\n                                    />\n                                </div>\n                            )}\n                        </Field>\n                        {isSubmitting && <LinearProgress />}\n                    </fieldset>\n                    <Button\n                        className={classes.button}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={isSubmitting}\n                        onClick={submitForm}\n                    >\n                        Create\n                    </Button>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nCreateForm.propTypes = {\n    createGame: T.func.isRequired,\n    loading: T.bool,\n};\n\nexport default CreateForm;\n","import React from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { useNavigate } from '@reach/router';\n\nimport CreateForm from './CreateForm';\n\nexport const CREATE_GAME = gql`\n    mutation createGame($name: String!, $description: String!, $size: Int!) {\n        createGame(name: $name, description: $description, size: $size) {\n            success\n            message\n            game {\n                accessCode\n            }\n        }\n    }\n`;\n\nconst Create = () => {\n    const navigate = useNavigate();\n    const [createGame, { loading, error }] = useMutation(CREATE_GAME, {\n        onCompleted: ({ createGame: { success, game }}) => {\n            if (success) {\n                navigate(`/game/${game.accessCode}`);\n            }\n        }\n    });\n\n    return (\n        <>\n            {error && <div>{error}</div>}\n            <CreateForm createGame={createGame} loading={loading} />\n        </>\n    );\n};\n\nexport default Create;\n","import Create from './Create';\n\nexport default Create;\n","import React from 'react';\nimport T from 'prop-types';\nimport { Formik, Form, Field } from 'formik';\nimport { Button, LinearProgress } from '@material-ui/core';\nimport { TextField } from 'formik-material-ui';\n\nimport useStyles from '../common/useStyles';\n\nconst JoinForm = ({ joinGame, loading }) => {\n    const classes = useStyles();\n\n    return (\n        <Formik\n            initialValues={{\n                accessCode: '',\n            }}\n            validate={values => {\n                const errors = {};\n\n                if (!values.accessCode) {\n                    errors.accessCode = 'Required';\n                } else if (!/^[a-z]{4}$/.test(values.accessCode)) {\n                    errors.accessCode = 'Access code must be a 4 character code';\n                }\n\n                return errors;\n            }}\n            onSubmit={async (values, { setSubmitting}) => {\n                await joinGame({ variables: values });\n                setSubmitting(false);\n            }}\n        >\n            {({ submitForm, isSubmitting }) => (\n                <Form className={classes.containerCenter}>\n                    <h1>Join Game</h1>\n                    <fieldset className={classes.noBorder} disabled={loading}>\n                        <Field\n                            component={TextField}\n                            className={classes.textField}\n                            name=\"accessCode\"\n                            type=\"text\"\n                            label=\"Access code\"\n                        />\n                        {isSubmitting && <LinearProgress />}\n                    </fieldset>\n                    <Button\n                        className={classes.button}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={isSubmitting}\n                        onClick={submitForm}\n                    >\n                        Join\n                    </Button>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nJoinForm.propTypes = {\n    joinGame: T.func.isRequired,\n};\n\nexport default JoinForm;\n\n","import React, { useState, useEffect } from 'react';\nimport gql from 'graphql-tag';\nimport { useNavigate, useParams } from '@reach/router';\nimport { useMutation } from '@apollo/react-hooks';\n\nimport JoinForm from './JoinForm';\n\nconst JOIN_GAME = gql`\n    mutation joinGame($accessCode: String!) {\n        joinGame(accessCode: $accessCode) {\n            success\n            message\n            game {\n                accessCode\n            }\n        }\n    }\n`;\n\nconst Join = () => {\n    const navigate = useNavigate();\n    const { accessCode } = useParams();\n    const [error, setError] = useState('');\n    const [joinGame, { loading }] = useMutation(JOIN_GAME, {\n        onCompleted: ({ joinGame: { success, message, game }}) => {\n            if (success) {\n                navigate(`/game/${game.accessCode}`);\n            } else {\n                setError(message);\n            }\n        }\n    });\n\n    // if navigating to url with accessCode, attempt to join it\n    useEffect(() => {\n        if (accessCode) {\n            joinGame({ variables: { accessCode }});\n        }\n    }, [accessCode, joinGame]);\n\n    return (\n        <>\n            {error && <div>{error}</div>}\n            <JoinForm joinGame={joinGame} loading={loading} />\n        </>\n    );\n};\n\nexport default Join;\n","import Join from './Join';\n\nexport default Join;\n","import React from 'react';\nimport T from 'prop-types';\nimport CheckBoxOutlineBlankRoundedIcon from '@material-ui/icons/CheckBoxOutlineBlankRounded';\nimport CheckBoxRoundedIcon from '@material-ui/icons/CheckBoxRounded';\n\nconst PlayerReady = ({ game, isCurrent, user, updateUser }) => {\n    const ready = user.status === 'READY';\n\n    const updateStatus = () => {\n        const status = ready ? 'WAITING' : 'READY';\n        updateUser({\n            variables: {\n                gameId: game.id,\n                userId: user.id,\n                status,\n            },\n            // provide optimistic update for local cache\n            optimisticResponse: {\n                __typename: 'Mutation',\n                updateUser: {\n                    __typename: 'UserUpdateResponse',\n                    success: true,\n                    user: {\n                        ...user,\n                        status,\n                    },\n                },\n            }\n        });\n    };\n\n    return (\n        <div {...(isCurrent && { onClick: updateStatus })}>\n            {ready ? (\n                <CheckBoxRoundedIcon />\n            ) : (\n                <CheckBoxOutlineBlankRoundedIcon />\n            )}\n        </div>\n    )\n};\n\nPlayerReady.propTypes = {\n    game: T.object.isRequired,\n    isCurrent: T.bool.isRequired,\n    user: T.object.isRequired,\n    updateUser: T.func.isRequired,\n};\n\nexport default PlayerReady;\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst usePlayerStyles = makeStyles(_ => ({\n    player: {\n        width: '100%',\n        display: 'flex',\n        background: '#ececec',\n        padding: 8,\n        marginBottom: 8,\n        fontSize: 14,\n        alignItems: 'center',\n    },\n    header: {\n        fontSize: 10,\n        fontWeight: 600,\n        lineHeight: 0.5,\n    },\n    empty: {\n        justifyContent: 'center',\n        fontSize: 12,\n    },\n    name: {\n        flex: '0 0 25%',\n    },\n    ready: {\n        flex: '0 0 15%',\n        display: 'flex',\n        alignItems: 'center',\n    },\n    note: {\n        flex: '0 0 50%',\n    },\n}));\n\nexport default usePlayerStyles;\n","import React from 'react';\nimport T from 'prop-types';\nimport { get } from 'lodash';\nimport gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\n\nimport PlayerReady from './PlayerReady';\nimport usePlayerStyles from './usePlayerStyles';\nimport { USER_DATA } from '../common/schema';\n\nconst GET_USER = gql`\n    query getUser($userId: ID!) {\n        user(userId: $userId) @client {\n            ...UserData\n        }\n    }\n    ${USER_DATA}\n`;\n\nconst UPDATE_USER = gql`\n    mutation updateUser($userId: ID!, $gameId: ID!, $status: UserStatus, $statusMessage: String) {\n        updateUser(userId: $userId, gameId: $gameId, status: $status, statusMessage: $statusMessage) {\n            success,\n            user {\n                ...UserData\n            }\n        }\n    }\n    ${USER_DATA}\n`;\n\nconst Player = ({ game, userId, current }) => {\n    const classes = usePlayerStyles();\n    const isCurrent = userId === get(current, 'id');\n    const { data: { user } } = useQuery(GET_USER, { variables: { userId: userId }});\n    const [updateUser] = useMutation(UPDATE_USER);\n\n    return (\n        <div className={classes.player}>\n            <div className={classes.name} title={user.email}>\n                {user.name}\n            </div>\n            <div className={classes.ready}>\n                <PlayerReady\n                    isCurrent={isCurrent}\n                    game={game}\n                    user={user}\n                    updateUser={updateUser}\n                />\n            </div>\n            <div className={classes.note}>\n                {user.statusMessage}\n            </div>\n        </div>\n    );\n};\n\nPlayer.propTypes = {\n    game: T.object,\n    user: T.object,\n    current: T.object\n};\n\nexport default Player;\n","import React from 'react';\nimport T from 'prop-types';\nimport { Button } from '@material-ui/core';\n\nimport useStyles from '../common/useStyles';\n\nconst GameActions = ({ isStartDisabled, isHost, startGame, leaveGame }) => {\n    const classes = useStyles();\n\n    return (\n        <div>\n            {isHost && (\n                <Button\n                    className={classes.button}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={isStartDisabled}\n                    onClick={startGame}\n                >\n                    Start\n                </Button>\n            )}\n            <Button\n                className={classes.button}\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={leaveGame}\n            >\n                Leave\n            </Button>\n        </div>\n    );\n};\n\nGameActions.propTypes = {\n    isStartDisabled: T.bool.isRequired,\n    isHost: T.bool.isRequired,\n    startGame: T.func.isRequired,\n    leaveGame: T.func.isRequired,\n};\n\nexport default GameActions;\n","import React, { useEffect } from 'react';\nimport T from 'prop-types';\nimport classNames from 'classnames';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useNavigate } from '@reach/router';\n\nimport Player from './Player';\nimport GameActions from './GameActions';\n\nimport usePlayerStyles from './usePlayerStyles';\nimport useStyles from '../common/useStyles';\n\nconst LEAVE_GAME = gql`\n    mutation leaveGame($gameId: ID!) {\n        leaveGame(gameId: $gameId) {\n            success\n        }\n    }\n`;\n\nconst Lobby = ({ me, game, subscribe, startCrewGame }) => {\n    const classes = useStyles();\n    const playerClasses = usePlayerStyles();\n    const navigate = useNavigate();\n    const [leaveGame] = useMutation(LEAVE_GAME, {\n        variables: { gameId: game.id },\n        onCompleted: ({ leaveGame: { success } }) => {\n            if (success) {\n                navigate('/');\n            }\n        }\n    });\n    const isStartDisabled = game.users.some(user => user.status !== 'READY');\n    const isHost = me.id === game.hostId;\n\n    /**\n     * Add subscriptions for player updates, game updates\n     */\n    useEffect(() => {\n        subscribe(me.id);\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    return (\n        <div className={classes.containerCenter}>\n            <h1>Game lobby: {game.name}</h1>\n            <h3>Access code: {game.accessCode}</h3>\n            <div className={classNames(playerClasses.player, playerClasses.header)}>\n                <div className={playerClasses.name}>Name</div>\n                <div className={playerClasses.ready}>Ready</div>\n                <div className={playerClasses.note}>Note</div>\n            </div>\n            {game.users.map((user) => (\n                <Player key={user.email} game={game} userId={user.id} current={me} />\n            ))}\n            {Array(game.size - game.users.length)\n                .fill(0)\n                .map((_, i) => (\n                    <div\n                        key={`open-slot-${i + 1}`}\n                        className={classNames(playerClasses.player, playerClasses.empty)}\n                    >\n                        (open)\n                    </div>\n                ))}\n            <GameActions\n                isStartDisabled={isStartDisabled}\n                isHost={isHost}\n                startGame={startCrewGame}\n                leaveGame={leaveGame}\n            />\n        </div>\n    );\n};\n\nLobby.propTypes = {\n    me: T.object,\n    game: T.object,\n    subscribe: T.func.isRequired,\n    startCrewGame: T.func.isRequired,\n};\n\nexport default Lobby;\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useCrewStyles = makeStyles((_) => ({\n    cardContainer: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n}));\n\nexport default useCrewStyles;\n","import React, { useState } from 'react';\nimport T from 'prop-types';\nimport classNames from 'classnames';\nimport { isEmpty } from 'lodash';\nimport { makeStyles } from '@material-ui/core/styles';\nimport red from '@material-ui/core/colors/red';\nimport blue from '@material-ui/core/colors/blue';\nimport green from '@material-ui/core/colors/green';\nimport yellow from '@material-ui/core/colors/yellow';\nimport grey from '@material-ui/core/colors/grey';\n\nconst useCardStyles = makeStyles((_) => ({\n    card: {\n        width: 40,\n        height: 60,\n        border: '1px solid #ececec',\n        display: 'flex',\n    },\n    R: {\n        backgroundColor: red[700],\n        color: grey[50],\n    },\n    G: {\n        backgroundColor: green[700],\n        color: grey[50],\n    },\n    B: {\n        backgroundColor: blue[700],\n        color: grey[50],\n    },\n    Y: {\n        backgroundColor: yellow[400],\n    },\n    W: {\n        backgroundColor: grey[200],\n    },\n    hover: {\n        border: '1px solid black',\n    },\n    taskSymbol: {\n        alignSelf: 'flex-end',\n    },\n    task: {\n        cursor: 'pointer',\n    },\n}));\n\nconst Card = ({ card, isTask = false, taskReq = {}, handleClick }) => {\n    const [isHover, setHover] = useState(false);\n    const cardClasses = useCardStyles();\n    const { tooltip, symbol } = getTaskProps(taskReq);\n\n    return (\n        <div\n            className={classNames(cardClasses.card, cardClasses[card.color], {\n                [cardClasses.hover]: isHover,\n                [cardClasses.task]: isTask\n            })}\n            onMouseEnter={() => setHover(true)}\n            onMouseLeave={() => setHover(false)}\n            title={isTask ? tooltip: ''}\n        >\n            <div>{card.number}</div>\n            {isTask && <div className={cardClasses.taskSymbol}>{symbol}</div>}\n        </div>\n    );\n};\n\nCard.propTypes = {\n    card: T.shape({\n        number: T.number.isRequired,\n        color: T.string.isRequired\n    }),\n    isTask: T.bool,\n    taskReq: T.shape({\n        isFirst: T.bool,\n        order: T.number,\n        isLast: T.bool\n    }),\n    handleClick: T.func\n};\n\nfunction getTaskProps(taskReq) {\n    if (isEmpty(taskReq)) return {};\n    const props = { symbol: '' };\n\n    if (taskReq.isFirst) {\n        props.tooltip = 'This task must be completed first.';\n        props.symbol = '\\u03B1';\n    } else if (taskReq.isLast) {\n        props.tooltip = 'This task must be completed last.';\n        props.symbol = '\\u03A9';\n    } else if (taskReq.order) {\n        props.tooltip = 'This task must be done in order.';\n        props.symbol = '>'.repeat(taskReq.order);\n    } else {\n        props.tooltip = 'This task can be completed at any time.';\n    }\n\n    return props;\n}\n\nexport default Card;\n","import React from 'react';\nimport T from 'prop-types';\n\nimport useCrewStyles from './useCrewStyles';\nimport Card from './Card';\n\nconst AssignTasks = ({ tasks }) => {\n    const crewClasses = useCrewStyles();\n\n    return (\n        <div>\n            Assign tasks\n            <div className={crewClasses.cardContainer}>\n                {[\n                    ...(tasks.first ? (\n                        <Card card={tasks.first} isTask taskReq={{ isFirst: true }} />\n                    ) : (\n                        []\n                    )),\n                    ...tasks.ordered.map((task, i) => (\n                        <Card\n                            key={`task-ordered-${i}`}\n                            card={task}\n                            isTask\n                            taskReq={{ order: i + 1 }}\n                        />\n                    )),\n                    ...(tasks.last ? (\n                        <Card card={tasks.last} isTask taskReq={{ isLast: true }} />\n                    ) : (\n                        []\n                    )),\n                    ...tasks.unordered.map((task, i) => (\n                        <Card key={`task-unordered=${i}`} card={task} isTask />\n                    ))\n                ]}\n            </div>\n        </div>\n    );\n};\n\nAssignTasks.propTypes = {\n    tasks: T.shape({\n        ordered: T.array,\n        unordered: T.array,\n        first: T.object,\n        last: T.object\n    })\n};\n\nexport default AssignTasks;\n","import React, { useMemo } from 'react';\nimport T from 'prop-types';\n\nimport AssignTasks from './AssignTasks';\n\nconst Board = ({ game }) => {\n    console.log(game);\n    const { gameState } = game;\n    const { tasks, turn } = useMemo(() => {\n        return JSON.parse(gameState);\n    }, [gameState]);\n    console.log(tasks);\n\n    return (\n        <div>\n            {!turn ? (\n                <AssignTasks tasks={tasks} />\n            ) : (\n                'Game in progress'\n            )}\n        </div>\n    );\n};\n\nBoard.propTypes = {\n    game: T.object.isRequired\n};\n\nexport default Board;\n","import React, { useMemo } from 'react';\nimport T from 'prop-types';\n\nimport Card from './Card';\nimport useCrewStyles from './useCrewStyles';\n\nconst Player = ({ user }) => {\n    const { id, playerState } = user;\n    const crewClasses = useCrewStyles();\n    const sortedHand = useMemo(() => {\n        const { hand } = JSON.parse(playerState);\n\n        return sortHand(hand);\n    }, [playerState]);\n\n    return (\n        <div>\n            <div>\n                {user.name}\n            </div>\n            <div className={crewClasses.cardContainer}>\n                {sortedHand.map((card, i) => (\n                    <Card\n                        key={`player-${id}-card-${i}`}\n                        card={card}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nPlayer.propTypes = {\n    user: T.object,\n};\n\n\nfunction sortHand(hand) {\n    const colors = {};\n\n    for (let card of hand) {\n        if (!colors[card.color]) {\n            colors[card.color] = [];\n        }\n        colors[card.color].push(card);\n    }\n\n    Object.keys(colors).forEach(color => {\n        colors[color].sort((a, b) => a.number - b.number);\n    });\n\n    return ['R', 'G', 'B', 'Y', 'W'].reduce((res, color) => {\n        if (colors[color]) {\n            res = res.concat(colors[color]);\n        }\n        return res;\n    }, [])\n}\n\nexport default Player;\n","import React from 'react';\nimport T from 'prop-types';\nimport classNames from 'classnames';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Board from './Board';\nimport Player from './Player';\n\nimport useStyles from '../../common/useStyles';\n\nconst useLayoutStyles = makeStyles((_) => ({\n    mid: {\n        height: 400,\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    game: {\n        height: 600,\n    },\n    board: {\n        flex: 1,\n    },\n    player: {\n        height: 120,\n    },\n    playerTop: {\n        height: 60,\n    },\n    playerVertical: {\n        width: 60,\n        borderLeft: '1px solid gray',\n        borderRight: '1px solid gray',\n    },\n    border: {\n        border: '1px solid gray',\n    },\n}));\n\nconst Layout = ({ me, game }) => {\n    const classes = useStyles();\n    const layoutClasses = useLayoutStyles();\n\n    // const gameState = JSON.parse(game.gameState);\n    const myPlayerIndex = game.users.findIndex(user => user.id === me.id);\n\n    return (\n        <div className={classNames(classes.containerCenter, classes.stretch)}>\n            <div className={classes.containerCenter}>Header</div>\n            <div className={layoutClasses.game}>\n                <div className={classNames(layoutClasses.playerTop, layoutClasses.border)}>\n                    Player Top\n                </div>\n                <div className={layoutClasses.mid}>\n                    <div className={classNames(layoutClasses.playerVertical)}>\n                        Player Left\n                    </div>\n                    <div className={layoutClasses.board}>\n                        <Board game={game} />\n                    </div>\n                    <div className={classNames(layoutClasses.playerVertical)}>\n                        Player Right\n                    </div>\n                </div>\n                <div className={classNames(layoutClasses.player, layoutClasses.border)}>\n                    <Player user={game.users[myPlayerIndex]} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nLayout.propTypes = {\n    me: T.object,\n    game: T.object.isRequired\n};\n\nexport default Layout;\n","import gql from 'graphql-tag';\nimport { merge, mergeWith } from 'lodash';\nimport { USER_DATA, GAME_DATA } from '../common/schema';\n\nconst PLAYER_JOINED = gql`\n    subscription playerJoined($gameId: ID!) {\n        playerJoined(gameId: $gameId) {\n            user {\n                ...UserData\n            }\n            isNew\n        }\n    }\n    ${USER_DATA}\n`;\n\nconst PLAYER_LEFT = gql`\n    subscription playerLeft($gameId: ID!) {\n        playerLeft(gameId: $gameId) {\n            userId\n            hostId\n            isDeleted\n        }\n    }\n`;\n\nconst USER_UPDATED = gql`\n    subscription userUpdated($gameId: ID!, $currentUserId: ID!) {\n        userUpdated(gameId: $gameId, currentUserId: $currentUserId) {\n            user {\n                ...UserData\n            }\n        }\n    }\n    ${USER_DATA}\n`;\n\nconst CREW_GAME_STARTED = gql`\n    subscription crewGameStarted($gameId: ID!) {\n        crewGameStarted(gameId: $gameId) {\n            game {\n                ...GameData\n            }\n        }\n    }\n    ${GAME_DATA}\n`;\n\nexport const playerJoined = (gameId) => ({\n    document: PLAYER_JOINED,\n    variables: { gameId },\n    updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data || !subscriptionData.data.playerJoined.isNew) return prev;\n\n        return mergeWith(\n            {},\n            prev,\n            { game: { users: [subscriptionData.data.playerJoined.user] } },\n            (dst, src) => (Array.isArray(dst) ? [...dst, ...src] : undefined)\n        );\n    }\n});\n\nexport const playerLeft = (gameId) => ({\n    document: PLAYER_LEFT,\n    variables: { gameId },\n    updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        const { isDeleted, userId, hostId } = subscriptionData.data.playerLeft;\n\n        if (isDeleted) {\n            return { ...prev, game: null };\n        }\n\n        return {\n            game: {\n                ...prev.game,\n                users: prev.game.users.filter((user) => user.id !== userId),\n                hostId\n            }\n        }\n    }\n});\n\nexport const userUpdated = (gameId, userId) => ({\n    document: USER_UPDATED,\n    variables: { gameId, currentUserId: userId },\n    updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        const { user: userUpdated } = subscriptionData.data.userUpdated;\n        const nextState = { ...prev };\n        nextState.game.users = nextState.game.users.map((user) =>\n            user.id === userUpdated.id ? userUpdated : user\n        );\n\n        return merge({}, nextState);\n    }\n});\n\nexport const crewGameStarted = (gameId) => ({\n    document: CREW_GAME_STARTED,\n    variables: { gameId },\n    updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        const nextState = { ...prev, game: subscriptionData.data.crewGameStarted.game };\n\n        return merge({}, nextState);\n    }\n});\n","import React from 'react';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { useParams } from '@reach/router';\nimport { get } from 'lodash';\n\nimport Lobby from './Lobby';\nimport { Layout } from './Crew';\nimport * as gameSubscriptions from './subscriptions';\nimport Loading from '../common/Loading';\nimport { GAME_DATA, USER_DATA } from '../common/schema';\n\nconst GET_CURRENT_USER = gql`\n    query me {\n        me @client {\n            ...UserData\n        }\n    }\n    ${USER_DATA}\n`;\n\nexport const GET_GAME = gql`\n    query getGame($accessCode: String!) {\n        game(accessCode: $accessCode) {\n            ...GameData\n        }\n    }\n    ${GAME_DATA}\n`;\n\nconst START_CREW_GAME = gql`\n    mutation startCrewGame($gameId: ID!) {\n        startCrewGame(gameId: $gameId) {\n            success\n            game {\n                ...GameData\n            }\n        }\n    }\n    ${GAME_DATA}\n`;\n\nconst Game = () => {\n    const { accessCode } = useParams();\n    const { data, loading, error, subscribeToMore } = useQuery(GET_GAME, {\n        variables: { accessCode },\n        fetchPolicy: 'network-only'\n    });\n    const { data: { me } } = useQuery(GET_CURRENT_USER);\n    const [startCrewGame] = useMutation(START_CREW_GAME, {\n        variables: { gameId: get(data, 'game.id') }\n    });\n    // subscribe to game updates\n    const subscribe = (userId) => {\n        subscribeToMore(gameSubscriptions.playerJoined(data.game.id));\n        subscribeToMore(gameSubscriptions.playerLeft(data.game.id));\n        subscribeToMore(gameSubscriptions.userUpdated(data.game.id, userId));\n        subscribeToMore(gameSubscriptions.crewGameStarted(data.game.id));\n    };\n\n    if (loading) return <Loading />;\n    if (error) return <p>ERROR</p>;\n    if (!data) return <p>Not found</p>;\n    if (data.game.status === 'IN_PROGRESS')\n        return <Layout me={me} game={data.game} />;\n\n    return <Lobby me={me} game={data.game} subscribe={subscribe} startCrewGame={startCrewGame} />;\n};\n\nexport default Game;\n","import Game from './Game';\n\nexport default Game;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Container } from '@material-ui/core';\nimport { Router } from '@reach/router';\n\nimport Login from './Login';\nimport Menu from './Menu';\nimport Create from './Create';\nimport Join from './Join';\nimport Game from './Game';\n\nimport './App.scss';\n\nconst IS_LOGGED_IN = gql`\n  query isLoggedIn {\n    isLoggedIn @client\n  }\n`;\n\nfunction App() {\n  const { data } = useQuery(IS_LOGGED_IN);\n\n  return (\n      <Container maxWidth=\"sm\">\n          {!data.isLoggedIn ? (\n              <Login />\n          ) : (\n              <Router>\n                  <Menu path=\"/\" />\n                  <Create path=\"/create\" />\n                  <Join path=\"/join\" />\n                  <Join path=\"/join/:accessCode\" />\n                  <Game path=\"/game/:accessCode\" />\n              </Router>\n          )}\n      </Container>\n  );\n}\n\nexport default App;\n","import gql from 'graphql-tag';\n\nexport const typeDefs = gql`\n    directive @client on FIELD\n    \n    extend type Query {\n        isLoggedIn: Boolean!\n        me: User\n    }\n`;\n\nexport const resolvers = {\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, split } from 'apollo-link';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { persistCache } from 'apollo-cache-persist';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nimport App from './App';\nimport { resolvers, typeDefs } from './resolvers';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nconst cache = new InMemoryCache({\n    cacheRedirects: {\n        Query: {\n            user: (_, args, { getCacheKey }) =>\n                getCacheKey({\n                    __typename: 'User',\n                    id: args.userId\n                })\n        }\n    }\n});\n\nconst authLink = setContext((_, { headers }) => ({\n    // get auth token if it exists and return headers to context for httpLink to read\n    headers: {\n        ...headers,\n        authorization: localStorage.getItem('readyup-token'),\n    },\n}));\n\n// http link to graphql\nconst httpLink = authLink.concat(new HttpLink({\n    uri: 'http://localhost:4000',\n    credentials: 'same-origin',\n}));\n\n// websocket link to subscriptions\nconst wsLink = new WebSocketLink({\n    uri: 'ws://localhost:4000/subscriptions',\n    options: {\n        reconnect: true,\n    },\n});\n\n// split links to send data to each link based on operation type\nconst link = split(\n    // split based on operation type\n    ({ query }) => {\n        const definition = getMainDefinition(query);\n\n        return definition.kind === 'OperationDefinition' &&\n            definition.operation === 'subscription';\n    },\n    wsLink,\n    httpLink\n);\n\nconst client = new ApolloClient({\n    link: ApolloLink.from([\n        onError(({ graphQLErrors, networkError }) => {\n            if (graphQLErrors)\n                graphQLErrors.forEach(({ message, locations, path }) =>\n                    console.log(\n                        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n                    ),\n                );\n            if (networkError) console.log(`[Network error]: ${networkError}`);\n        }),\n        link,\n    ]),\n    cache,\n    typeDefs,\n    resolvers,\n});\n\ncache.writeData({\n    data: {\n        isLoggedIn: !!localStorage.getItem('readyup-token'),\n    },\n});\n\n// set up persisted client cache\nconst setupAndRender = async () => {\n    await persistCache({\n        cache,\n        storage: localStorage\n    });\n\n    ReactDOM.render(\n        <ApolloProvider client={client}>\n            <App />\n        </ApolloProvider>,\n        document.getElementById('root')\n    );\n};\n\nsetupAndRender();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}